
testtry = fn (){
    try {
        io:format("~p~n", [time()]);
        io:format("asd~n", []);
    }
    catch ((throw, 1, _)) {
        io:format("1"); }
    ((throw, 2, _)) {
        io:format("2"); }
    finally {
        io:format("finally~n");
    };
};

trycatch = fn (){
    try {
        throw(1);
    }
    catch ((throw, 1, _)) {
        io:format("1"); }
    ((throw, 2, _)) {
        io:format("2"); }
    finally {
        io:format("finally~n");
    };
};

trycatch1 = fn (){
    try {
        throw(2);
    }
    catch ((throw, 1, _)) {
        io:format("1"); }
    ((throw, 2, _)) {
        io:format("2"); }
    finally {
        io:format("finally~n");
    };
};

recvafter = fn () {
    receive (1) {
        io:format("match: 1~n");
    }
    (2) {
        io:format("match: 2~n");
    }
    (Atom) if is_atom(Atom) {
        io:format("atom: ~p~n", [Atom]);
    }
    (Number) {
        io:format("otro numero: ~p~n", [Number]);
    }
    after 1000 {
        io:format("after~n");
    };
    recv();
};

recv = fn () {
    receive (1) {
        io:format("match: 1~n");
    }
    (2) {
        io:format("match: 2~n");
    }
    (Atom) if is_atom(Atom) {
        io:format("atom: ~p~n", [Atom]);
    }
    (Number) {
        io:format("otro numero: ~p~n", [Number]);
    };
    recv();
};
