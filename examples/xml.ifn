
@public
run = fn ()
    Xml = [root => [
        attrs => [
            attr1 => atom,
            attr2 => "string",
            attr3 => 42,
            attr4 => 12.3,
            attr5 => false,
            attr6 => nil],

        items => [
            child1 => [
                attrs => [
                    type => "only attrs"]],

            child2 => [body => "only content"],
            emptychild,
            a => [
                attrs => [
                    href => "http://www.google.com"],

                "google.com"],
            child3 => [
                items => [
                    deep => [body => "child of child"]]]]]]

    io.format("default options:~n~s~n", [fxml.xml(Xml)])
    io.format("new line only:~n~s~n", [fxml.xml(Xml, [new_line])])
    io.format("indent only:~n~s~n", [fxml.xml(Xml, [indent => 2])])
    io.format("new line and 4 space indent:~n~s~n", [fxml.xml(Xml, [new_line, indent => 4])])

    show_tag("empty tag", emptytag)
    show_tag("with content", withcontent => "this is the content")
    show_tag("only attrs", onlyattrs => [attrs => [number => 4, boolean => false]])
    show_tag("both", both => [attrs => [number => 4, boolean => false], "body"])
    show_tag("only childs", onlychilds => [
        items => [
            number => [body => 4],
            boolean => [body => false]]])

    show_tag("childs and attrs",
        onlyattrs => [
            attrs => [
                number => 4,
                boolean => false],
            items => [
                child1 => [body => "only content"],
                child2 => [attrs => [someattr => "some value"]]]])

show_tag = fn (Msg, Tag)
    io.format("~s:~n~s~n~n", [Msg, fxml.xml(Tag)])
