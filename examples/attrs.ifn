
# this is a global attribute, it won't be tied to a function
@@author("Mariano Guerra")

# this is a function attribute, it will be tied to the function
# after it
@get("/")
@produces(html)
@public
index = fn (_Req)
    "hello world!"

# another global attribute, you can place attributes anywhere
@@version((1, 0, 0))

@post("/user/")
@accepts(json)
@produces(txt)
@public
create_user = fn (_Req, _Body)
    (200, "ok")

@public
run = fn ()
    Api = get_rest_api(module_info(attributes))
    pretty_print_api(Api)

# dont look down here if you are new :)

create_or_update = fn (Dict, Key, Value)
    IsKey = dict.is_key(Key, Dict)

    if IsKey
        dict.append(Key, [Value], Dict)
    else
        dict.store(Key, [Value], Dict)

get_rest_api = fn (Attrs)
    get_rest_api(Attrs, dict.new())

add_method = fn (Method, Path, Api, Fun, Tail)
    add_data((method, (Method, Path)), Api, Fun, Tail)

add_data = fn (Value, Api, Fun, Tail)
    NewApi = create_or_update(Api, Fun, Value)
    get_rest_api(Tail, NewApi)

get_rest_api = fn ([], Api)
    Api

fn ([(get=Method, [((_Name, _Arity)=Fun, Path):_]):T], Api)
    add_method(Method, Path, Api, Fun, T)
fn ([(post=Method, [((_Name, _Arity)=Fun, Path):_]):T], Api)
    add_method(Method, Path, Api, Fun, T)
fn ([(put=Method, [((_Name, _Arity)=Fun, Path):_]):T], Api)
    add_method(Method, Path, Api, Fun, T)
fn ([(delete=Method, [((_Name, _Arity)=Fun, Path):_]):T], Api)
    add_method(Method, Path, Api, Fun, T)

fn ([(accepts, [((_Name, _Arity)=Fun, ContentType):_]):T], Api)
    add_data((accepts, to_mime(ContentType)), Api, Fun, T)
fn ([(produces, [((_Name, _Arity)=Fun, ContentType):_]):T], Api)
    add_data((produces, to_mime(ContentType)), Api, Fun, T)

fn ([_:T], Api)
    get_rest_api(T, Api)

to_mime = fn (json)
    "application/json"
fn (text)
     "text/plain"
fn (html)
     "text/html"
fn (xml)
     "text/xml"
fn (js)
     "application/javascript"
fn (Unk)
     atom_to_list(Unk)

get_function_props = fn (List)
    (Method, Path) = switch lists.keyfind(method, 1, List)
        case (method, (M, Pa))
            (M, Pa)
        case false
            (none, none)

    Accepts = switch lists.keyfind(accepts, 1, List)
        case (accepts, A)
            to_mime(A)
        case false
            to_mime(json)

    Produces = switch lists.keyfind(produces, 1, List)
        case (produces, P)
            to_mime(P)
        case false
            to_mime(html)

    (Method, Path, Accepts, Produces)

pretty_print_api = fn (Api)
    Print = fn ((Name, Arity), Value)
        (Method, Path, Accepts, Produces) = get_function_props(Value)
        io.format("~p/~p:~n", [Name, Arity])
        io.format("  method: ~p:~n", [Method])
        io.format("  path: ~p:~n", [Path])
        io.format("  accepts: ~p:~n", [Accepts])
        io.format("  produces: ~p:~n", [Produces])
        io.format("~n")
        Value

    dict.map(Print, Api)

# you can open your eyes here ;)

# this is a function attribute but since it's at the end it won't
# be tied to any function
@put("/user/")

