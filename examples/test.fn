
num_if = fn (Num) when Num > 0
{
    if Num < 10
    {
        one
    }
    else if Num < 20
    {
        two
    }
    else if Num < 30
    {
        tree
    }
    else
    {
        'else'
    }
}

num_case = fn (Num) when Num > 0
{
    switch Num
    {
        case 1
        {
            one
        }
        case 2
        {
            two
        }
        case T when T < 10
        {
            ohhi
        }
        else
        {
            'else'
        }
    }
}
fn (0)
{
    zero
}
fn (Num)
{
    Num
}

fun = fn (Num)
{
    fn (A) {
        A * Num
    }
}


lst = fn (one, A, (a, B, 1), [H:_])
{
    [A, B, H]
}

recv = fn ()
{
    receive 1
    {
        one
    }
    else receive Stuff
    {
        Stuff
    }
    after 10
    {
        slap
    }
}

fail = fn (F)
{
    try
    {
        F()
    }
    catch throw Throw
    {
        ("throw", Throw)
    }
    catch error Error
    {
        ("error", Error)
    }
    catch Type Ex
    {
        (atom_to_list(Type), Ex)
    }
}

public run = fn()
{
    Msg = "hello world~n"
    A = io
    B = format
    io.format(Msg)
    A.format(Msg)
    io.B(Msg)
    A.B(Msg)

    io.format("~p ~p ~p ~p ~p ~p~n",
        [num_if(4), num_case(-2), fun(3)(2), recv(),
            lst(one, two, (a, 2, 1), [1, 2, 3]),
            fail(fn () { throw(ohhai) })])
}
