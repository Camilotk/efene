# this is a efene file that describes the syntax of efene

# this is the declaration of a module level function called run that receives
# no arguments
run = fn () {
    # let's call a function to print a hello world
    # io is the io module, format is a function inside it
    # ~n is how you tell the function to print a new line
    io.format("Hello World~n")

    # we can call the same function but with parameters
    # ~s means "here comes a string"
    # ~B means "here comes an integer"
    # see http://erlang.mirror.su.se/doc/man/io.html#format-1
    # for more information
    io.format("~s ~s take: ~B~n", ["Hello", "World", 2])

    # if we want we can skip the comma
    io.format("~s ~s take: ~B~n" ["Hello", "World", 3])

    # we can define a function here to print
    Print = fn (String) {
        io.format("~s~n" [String])
    }

    # now we use the function
    Print("Hello Print function")

    # we can declare variables
    String = "Hello from a variable"

    Print(String)

    # we can build some nice functions like the following
    If = fn (true then OnTrue otherwise _OnFalse) {
        OnTrue()
    } (_ then _OnTrue otherwise OnFalse) {
        OnFalse()
    }

    # let's use it
    If(5 > 4 then { Print("5>4") } otherwise {Print("5>4 isn't true")})

    # more formated
    If(5 > 4 then {
        Print("5>4 again")
    } otherwise {
        Print("5>4 isn't true")
    })

    # above we defined a function that receives no arguments using only { and }
    # how is that useful? we use variables from the scope where that function
    # is defined (that is called a closure)

    # did you just defined the if statement? ;)
    # you can build it as you like, you can take out the then and otherwise
    # or do a simple one
    If1 = fn (true do OnTrue) {
        OnTrue()
    } (_ do _OnTrue) {
        undefined
    }

    If1(5 * 3 == 15 do { Print("Yay!") })
    # this will return undefined
    If1(5 * 3 == 16 do { Print("w00t?") })

    # lets create a list with squares of the numbers from 1 to 10 to use it
    # later (this is called a list comprehension)
    Squares = [N * N for N in lists.seq(1, 10)]

    # print it
    lists.foreach(fn (N) { io.format("~B~n", [N]) }, Squares)

    # we could build our own function for that
    ForEach = fn (item on List do Function) {
        lists.foreach(Function, List)
    }

    # let's define a useful function
    PrintNumber = fn (N) { io.format("~B~n", [N]) }

    # isn't it readable?
    ForEach(item on Squares do PrintNumber)

    # you may have noticed that I use commas to separate arguments on some
    # functions and on others I don't, that's a matter of taste :)

    # well that's all for now
}
