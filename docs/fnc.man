.TH FNC COMMAND LINE REFERENCE  "" "" ""
.SH NAME
fnc command line reference \- 
.\" Man page generated from reStructeredText.
.
.sp
.nf
.ft C
fnc [options] [arguments]
.ft P
.fi
.sp
\fIfnc\fP is the command line tool to interact with efene, it\(aqs a simple and
unified way to use efene, this tool allows to:
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
.
compile one or multiple files
.IP \(bu 2
.
run a program
.IP \(bu 2
.
start the interactive shell
.IP \(bu 2
.
debug all stages of compilation
.UNINDENT
.UNINDENT
.UNINDENT
.sp
This tool is just a thin front end that calls the appropiate erlang or efene
program, you can even use it to run compiled erlang programs.
.SH RUNNING THE INTERACTIVE SHELL
.sp
To start the interactive shell just type in your shell:
.sp
.nf
.ft C
fnc \-s
.ft P
.fi
.SH COMPILING ONE OR MORE FILES
.sp
To compile one or more files just give the filenames as parameters to fnc:
.sp
.nf
.ft C
# just one file
fnc file1.fn

# multiple files
fnc file1.fn file2.ifn file3.fn
.ft P
.fi
.SH RUNNING A COMPILED PROGRAM
.sp
To run a program you have to pass the name of the module and function that you
want to run to \fIfnc\fP with the \fI\-r\fP (run) flag:
.sp
.nf
.ft C
fnc \-r mymodule run
.ft P
.fi
.sp
That will run the \fIrun\fP function from the \fImymodule\fP module.
.sp
You can pass parameters to the function adding more values after the function name:
.sp
.nf
.ft C
fnc \-r mymodule run parameter 1 two false
.ft P
.fi
.sp
That call is equivalent to the call:
.sp
.nf
.ft C
mymodule.run(["parameter", "1", "two", "false"])
.ft P
.fi
.sp
As you can see all parameters are passed as a list of strings.
.sp
Since efene and erlang programs have the same byte code you can run erlang
programs using \fIfnc\fP:
.sp
.nf
.ft C
# compile a program using the erlang compiler
erlc mymodule.erl

# run the program using fnc
fnc \-r mymodule run
.ft P
.fi
.SH ADDING PATHS TO LOOK FOR MODULES
.sp
When you start a program or start the shell you can instruct efene to add some
extra paths to look for modules.
.sp
To do this there are two options that add paths:
.INDENT 0.0
.TP
.B \fI\-a <path>\fP
.sp
append the path to the path list
.TP
.B \fI\-p <path>\fP
.sp
prepend the path to the path list
.UNINDENT
.sp
An example of this, imagine you have a directory with you modules in /home/user/lib
and you want to start the shell with that path so you can access those modules:
.sp
.nf
.ft C
fnc \-s \-a /home/user/lib
.ft P
.fi
.sp
Now imagine that in /home/user/lib you have a newer version of a module that is
already available in the path where erlang looks for modules.
.sp
Adding the path to the end will make the other module to load instead of the one located at
/home/user/lib.
.sp
To load your version first you have to prepend your module (insert at the beggining):
.sp
.nf
.ft C
fnc \-s \-p /home/user/lib
.ft P
.fi
.sp
You can use this options as much as you need for example:
.sp
.nf
.ft C
fnc \-r server start \-p /home/user/lib \-a mods \-p libs \-a modules
.ft P
.fi
.SH TRANSFORM A MODULE TO ERLANG
.sp
To transform an efene or ifene module to erlang source code run:
.sp
.nf
.ft C
fnc \-t erl module.fn

fnc \-t erl module.ifn
.ft P
.fi
.sp
It will print the erlang source code to the screen, you can save it:
.sp
.nf
.ft C
fnc \-t erl module.fn > module.erl
.ft P
.fi
.SH WHEN SOMETHING GOES WRONG
.sp
you can see what \fIfnc\fP actually wanted to run passing the \fI\-T\fP option as first
option.
.sp
This will make \fIfnc\fP to print the command instead of running it, here are some
examples:
.sp
.nf
.ft C
$ fnc \-T \-s
erl \-run shell \-run init stop \-noshell \-pa "/home/mariano/Proyectos/efene/ebin"

$ fnc \-T foo.ifn
erl \-run fn run beam "." foo.ifn  \-run init stop \-noshell \-pa "/home/mariano/Proyectos/efene/ebin"

$ fnc \-T foo.ifn bar.fn
erl \-run fn run beam "." foo.ifn bar.fn  \-run init stop \-noshell \-pa "/home/mariano/Proyectos/efene/ebin"

$ fnc \-T \-r mymodule run parameter 1 two false
erl \-run mymodule run parameter 1 two false  \-run init stop \-noshell \-pa "/home/mariano/Proyectos/efene/ebin"
.ft P
.fi
.SH ADVANCED OPTIONS
.\" note:
.\" 
.\" This section is for advanced users, you don't need to know this to code or use efene.
.
.sp
efene transforms the source code into multiple data structures while it\(aqs
compiling, to make my life easier I added some options to debug the
intermediate representations of a module from the command line.
.sp
This tools can be also be used by people interested in helping efene or people
wanting to know more about erlang internals.
.sp
The different stages from a file to bytecode are the following:
.sp
.nf
.ft C
source \-> lex \-> tree \-> ast \-> mod \-> beam
.ft P
.fi
.sp
source
.INDENT 0.0
.INDENT 3.5
.sp
the source code file you edit
.UNINDENT
.UNINDENT
.sp
lex
.INDENT 0.0
.INDENT 3.5
.sp
a list of tuples that contains the \fItokens\fP of a program, each token is
represented by a two or three item tuple where the first item is the
type of the token, the second item is the line where the token was
found and the third (optional) item is the string representing the
token.
.sp
Some examples:
.sp
.nf
.ft C
{open,33,\(aq(\(aq}, {atom,33,to},
.ft P
.fi
.sp
Those two tokens represent the string \fB(to\fP in the line 33 of a file.
.UNINDENT
.UNINDENT
.sp
tree
.INDENT 0.0
.INDENT 3.5
.sp
a tree representing the Abstract Syntax Tree of efene, this is a tree
representation of the program.
.UNINDENT
.UNINDENT
.sp
ast
.INDENT 0.0
.INDENT 3.5
.sp
as tree but with some modifications to make it identical to erlang\(aqs
Abstract Syntax Tree.
.UNINDENT
.UNINDENT
.sp
mod
.INDENT 0.0
.INDENT 3.5
.sp
as ast but with information about the module added so it can be
compiled into a module.
.UNINDENT
.UNINDENT
.sp
beam
.INDENT 0.0
.INDENT 3.5
.sp
the bytecode you get written to a file.
.UNINDENT
.UNINDENT
.sp
All this steps can be dumped to the screen (except beam that goes to a file)
using the \-t option:
.sp
.nf
.ft C
# dump the lexer structure of module.fn
fnc \-t lex module.fn

# dump the tree structure of module.fn
fnc \-t tree module.fn

# dump the ast structure of module.fn
fnc \-t ast module.fn

# dump the mod structure of module.fn
fnc \-t mod module.fn

# compile the file to byte code
fnc \-t beam module.fn

# identical to above
fnc module.fn
.ft P
.fi
.sp
An extra option is available to transform an erlang file to ast, this is used
to compare the ast generated by an erlang program with an identical program in
efene:
.sp
.nf
.ft C
fnc \-t erl2ast mymodule.erl
.ft P
.fi
.sp
This option generated the same result as \fI\-t mod\fP but using an erlang file as
input.
.\" Generated by docutils manpage writer.
.\" 
.
