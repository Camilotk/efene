@@moddoc("module to build GUIs using a DSL")

@public
html = fn (Gui)
    html (Gui, [])

html = fn ([], Accum)
    lists.reverse(Accum)

fn ([Widget:Tail], Accum)
    html(Tail, [html(Widget, Accum):Accum])

fn (text => Attrs, _Accum)
    Id    = require(id, Attrs, text)
    Value = get(value, Attrs, "")

    fhtml.text(Id, Value)

fn (ltext => Attrs, _Accum)
    Id    = require(id, Attrs, text)
    Value = get(value, Attrs, "")
    Name  = get(value, Attrs, Id)
    Label = get(label, Attrs, Name)

    Text = fhtml.text(Id, Value, Name)
    LTag = fhtml.label(Id, Label)

    [LTag, Text]

fn (Widget, _Accum)
    Widget

@public
require = fn (Attr, Attrs, Tag)
    switch lists.keyfind(Attr, 1, Attrs)
        case false
            throw(required_attribute =>
                io_lib.format("attribute ~p required in '~p'", [Attr, Tag]))
        case Attr => Value
            Value

@public
get = fn (Attr, Attrs, Default)
    switch lists.keyfind(Attr, 1, Attrs)
        case false
            Default
        case Attr => Value
            Value
