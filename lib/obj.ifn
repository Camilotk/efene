
@doc("
return a list of two item tuples containing as key the name of the attribute as
string and as value the value of that attribute")

@public
to_dict = fn (Obj)
    to_dict(Obj, strkeys)

@doc("
return a list of two item tuples containing as key the name of the attribute as
string or atom depending on the second parameter (atomkeys, strkeys)
and as value the value of that attribute")

@public
to_dict = fn (Obj, atomkeys)
    [(Name, Obj(get, Name)) for Name in Obj(to, fieldslist)]
fn (Obj, strkeys)
    [(atom_to_list(Name), Obj(get, Name)) for Name in Obj(to, fieldslist)]

@doc("return a string with the JSON representation of Obj")
@public
to_json = fn(Obj)
    Items = [io_lib.format("~p: ~p, ", [Name, transform(Value)]) for (Name, Value) in to_dict(Obj)]
    Str = lists.flatten(Items)
    "{" ++ lists.sublist(Str, length(Str) - 2) ++ "}"

@doc("
transform values so that they are printed correctly by io_format
as valid json terms")

transform = fn (Value) when is_tuple(Value)
    transform(tuple_to_list(Value))
fn (Value) when is_boolean(Value)
    Value
fn (Value) when is_atom(Value)
    # TODO: see how to make atoms different from strings
    atom_to_list(Value)
fn (Value) when is_list(Value)
    transform(Value, [])
fn (Value)
    Value

transform = fn ([], Accum)
    lists.reverse(Accum)
fn ([H:T], Accum)
    transform(T, [transform(H):Accum])
