
@public
@doc("handle the @rec attribute, receive a record definition and return the
ast of that record")

attribute = fn (local, Line, (return, [NameAst], FieldsAst))
    Name = erl_parse.normalise(NameAst)

    if not is_atom(Name)
        (error, "record name must be an atom")
    else if element(1, FieldsAst) != tuple
        (error, "fields must be a tuple")
    else
        new(Line, Name, element(3, FieldsAst))

fn (local, _Line, (return, _NameAst, _FieldsAst))
        (error, "record attribute receives one parameter")

fn (local, _Line, _Args)
        (error, "record attribute must contain field definition after ->")

fn (_Type, _Line, _Args)
    not_implemented

@public
new = fn (Line, Name, Fields)
    (global_attribute, Line, record, (Name, fields(Line, Fields)))

@public
field = fn (Line, (match, _, (atom, _, _Name)=NameAst, (def, _, Default, Type)))
    (typed_record_field,
        (record_field, Line, NameAst, Default),
        spec.convert_one(Type))

fn (Line, (def, _, (atom, _, _Name)=NameAst, Type))
    (typed_record_field,
        (record_field, Line, NameAst),
        spec.convert_one(Type))

fn (Line, (match, _, (atom, _, _Name)=NameAst, Default))
    (record_field, Line, NameAst, Default)

fn (Line, (atom, _, _Name)=NameAst)
    (record_field, Line, NameAst)

@public
fields = fn (Line, Names)
    [field(Line, Field) for Field in Names]
