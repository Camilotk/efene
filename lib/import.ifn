@@license("New BSD License, part of efene, see LICENSE for details")

@public
@doc("handle the @import attribute, receive a path to import a filedefinition and return the
ast of that record")

attribute = fn (local, _Line, [PathAst])
    DestModule = get(fn_current_module)
    Path = erl_parse.normalise(PathAst)

    AstFromPath = ast_from_path(Path)

    switch AstFromPath
        case ok => Ast
            # XXX ugly
            put(fn_current_module, DestModule)

            (ok, SrcModule) = ast.module_name(Ast)
            Consts = constants_from_path(Path, SrcModule)

            for (ConstName, Origin, ConstAst) in Consts
                put((fn_constant_origin, DestModule, ConstName), Origin)

                put((fn_constant, DestModule, ConstName), ConstAst)
                put((DestModule, ConstName), (fn_constant, DestModule))

            filter_ast(Ast)
        case (error, _Reason) = Error
            Error

fn (local, _Line, (return, _First, _Second))
        (error, "import doesn't work with ->")

fn (_Type, _Line, _Args)
    not_implemented

@public
@doc("get the ast of a file, supports .ifn, .fn, .erl and .hrl")
ast_from_path = fn (Path)
    switch file_type_from_path(Path)
        # update docs above if you add a case
        case ifene
            ast_from_efene_file(Path)
        case efene
            ast_from_efene_file(Path)
        case erlang
            ast_from_erlang_file(Path)
        case erlang_header
            ast_from_erlang_file(Path)

@public
@doc("get the constants defined on a file")
constants_from_path = fn (Path, SrcModule)
    FileType = file_type_from_path(Path)
    switch FileType
        # update docs above if you add a case
        case ifene
            constants_from_efene_file(Path, SrcModule)
        case efene
            constants_from_efene_file(Path, SrcModule)
        case erlang
            constants_from_erlang_file(Path, SrcModule)
        case erlang_header
            constants_from_erlang_file(Path, SrcModule)

@public
@doc("get constants from erlang")
constants_from_erlang_file = fn (Path, SrcModule)
    (ok, Epp) = epp.open(Path, [])
    epp.parse_file(Epp)

    Consts = epp.macro_defs(Epp)

    Result = for (Name, Value) in Consts
        Const = switch Name
            case atom => 'MACHINE'
                skip
            case atom => 'BASE_MODULE'
                skip
            case atom => 'MODULE'
                skip
            case atom => 'LINE'
                skip
            case atom => 'FILE'
                skip
            case atom => 'BASE_MODULE_STRING'
                skip
            case atom => 'MODULE_STRING'
                skip
            case atom => 'BEAM'
                skip
            case atom => ConstName

                switch Value
                    case [(none, (none, ValueAst))]
                        ok => (ConstName, (none, (none, ValueAst)))
                    case [(Pnum, (Params, Toks))]
                        ToksDot = Toks ++ [(dot, 1)]

                        switch erl_parse.parse_exprs(ToksDot)
                            case ok => ErlMacroAst
                                ok => (ConstName, (Pnum, (Params, ErlMacroAst)))
                            case error => ErlParseError
                                io.format("error while parsing erlang macro~n")
                                io.format("not importing it~n")
                                io.format("~p, ~p~n", [ErlParseError, ToksDot])

                                skip

                    case Other
                        value_error => (Name, Other)

            case Other
                name_error=> Other

        switch Const
            case ok => (ConstName1, ConstAst)
                (ConstName1, SrcModule, ConstAst)
            case skip
                # skip builtin constants
                (,)
            case name_error => Reason
                io.format("don't know how to handle erlang macro ~p~n",
                    [Reason])

                (,)
            case value_error => Reason
                io.format("don't know how to handle erlang macro value ~p~n",
                    [Reason])

                (,)

    lists.filter(fn (X) { X != (,) }, Result)


@public
@doc("get constants from efene/ifene")
constants_from_efene_file = fn (_Path, SrcModule)
    Consts = get_keys((fn_constant, SrcModule))

    for (_, ConstName) in Consts
        ConstAst = get( (fn_constant, SrcModule, ConstName) )

        Origin = switch get( (fn_constant_origin, SrcModule, ConstName) )
            case undefined
                SrcModule
            case OriginModuleName
                OriginModuleName

        (ConstName, Origin, ConstAst)


@public
@doc("return an atom representing the file type
    .erl -> erlang
    .hrl -> erlang_header
    .fn  -> efene
    .ifn -> ifene
")
file_type_from_path = fn (Path)
    if lists.suffix(".fn",  Path)
        efene
    else if lists.suffix(".ifn",  Path)
        ifene
    else if lists.suffix(".erl",  Path)
        erlang
    else if lists.suffix(".hrl",  Path)
        erlang_header

@public
@doc("get the ast from an erlang file")
ast_from_erlang_file = fn (Path)
    epp.parse_file(Path, [], [])

@public
@doc("get the ast from an efene/ifene file")
ast_from_efene_file = fn (Path)
    # TODO: handle throws
    (ok, 'fn'.build_module(Path))

@public
@doc("remove unwanted nodes from the AST")
filter_ast = fn (Ast)
    ast.filter_top_level(Ast, [
        fn ast.filter_public_node:1,
        fn ast.filter_file_node:1,
        fn ast.filter_module_node:1,
        fn ast.filter_eof_node:1])
