@@license("New BSD License, part of efene, see LICENSE for details")
@@moddoc("module to manipulate struct data structures")

not_found = fn (_Struct, Name)
    throw(attribute_error => "struct has no attribute '" ++ atom_to_list(Name) ++ "'")

@doc("function called from get when the attribute wasn't found on the struct,
look if there is a proto_ attribute and look inside it to search for the
value")
not_found_proto = fn (Struct, Name) when is_atom(Name)
    if Struct.proto_?
        get(Struct.proto_, Name)
    else
        not_found(Struct, Name)

@doc("throw an exception stating that the value is not a valid struct")
not_struct = fn (Val)
    throw(value_error => io_lib.format("value ~p doesn't seem to be a struct", [Val]))

get_found = fn (_Struct, _Name, Value)
    Value

@public
@doc("return true if the parameter is a valid struct, false otherwise")
is_struct = fn ((struct, Values)) when is_list(Values)
    true

fn (_)
    false

@public
@doc("access the value of an attribute in a struct, if not found in the struct
look inside the proto_ attribute recursively")

get = fn (Struct, Names)
    get_h(Struct, Names, fn not_found_proto:2)

@public
@doc("access the value of an attribute in a struct, if not found in the struct, fail")

getown = fn (Struct, Names)
    get_h(Struct, Names, fn not_found:2)

@doc("internal helper to get a value and do something if not found")
get_h = fn (Struct, [], _FnNotFound)
    Struct

fn (Struct, [Name:Names], FnNotFound)
    get_h(get_h(Struct, Name, FnNotFound), Names, FnNotFound)

fn (Struct, Name, FnNotFound) when is_atom(Name)
    do(Struct, Name, fn get_found:3, FnNotFound)

@public
@doc("replace the value of an attribute in a struct")
set = fn ((struct, _Body)=Struct, [Name], Value)
    Key = normalize_key(Name)
    replace_key(Struct, Key, Value)

fn ((struct, _Body)=Struct, [Name:Names], Value)
    Key = normalize_key(Name)

    NewChild = set(get(Struct, Key), Names, Value)
    replace_key(Struct, Key, NewChild)

fn ((struct, _Body)=Struct, Name, Value) when is_atom(Name) or is_binary(Name)
    set(Struct, [Name], Value)

fn (Val, _Names, _Value)
    not_struct(Val)

@doc("used internally to replace a Key with a new Value, try with the provided
Key first, if not found and is an atom convert it to a binary string and try
again, otherwise fail")
replace_key = fn ((struct, _Body)=Struct, Name, Value) when is_list(Name)
    replace_key(Struct, Name, Value)

fn ((struct, Body)=Struct, Key, Value) when is_atom(Key) or is_binary(Key)
    if lists.keymember(Key, 1, Body)
        (struct, lists.keyreplace(Key, 1, Body, Key => Value))
    else if is_atom(Key)
        NewKey = list_to_binary(atom_to_list(Key))

        if lists.keymember(NewKey, 1, Body)
            (struct, lists.keyreplace(NewKey, 1, Body, NewKey => Value))
        else
            not_found(Struct, Key)
    else
        not_found(Struct, Key)

@public
@doc("return a pretty representation of a struct")
format = fn (Struct)
    format(Struct, false)

format = fn ((struct, Body), ShowFuns)
    Items = for Key => Val in Body if not is_function(Val) or ShowFuns
        NewKey = if is_binary(Key)
            binary_to_list(Key)
        else
            Key

        if Key == proto_
            ""
        else if schema.is_object(Val)
            io_lib.format("~p: ~s, ", [NewKey, format(Val, ShowFuns)])
        else
            io_lib.format("~p: ~s, ", [NewKey, fio.format(Val)])

    Items1 = lists.flatten(Items)
    Items1Len = length(Items1)

    if Items1Len == 0
        io_lib.format("{}")
    else
        # TODO: seems to enter here with Items1Len == 0 (?)
        io_lib.format("{~s}", [lists.sublist(Items1, Items1Len - 2)])

@public
@doc("pretty print a struct")
print = fn (Struct)
    print(Struct, false)

@public
@doc("pretty print a struct")
print = fn (Struct, ShowFuns)
    io.format("~s~n", [format(Struct, ShowFuns)])

has_not_found = fn ((struct, Body)=Struct, FName)
    # avoid calling has or has_h inside a call to has or has_h ;)
    if lists.keyfind(proto_, 1, Body) != false
        has_h(Struct.proto_, FName, fn has_not_found:2)
    else
        false

@public
@doc("return true if the struct has the given attribute as atom or string,
false otherwise.

if not found on its attributes, look on parent ones

the second parameter must be an atom or a list of atoms/strings")

has = fn (Struct, Names)
    FnNotFound = fn has_not_found:2
    has(Struct, Names, FnNotFound)

has = fn (_Struct, [], _FnNotFound)
    true

fn (Struct, [Name:Names], FnNotFound) when is_atom(Name) or is_binary(Name)
    switch has_h(Struct, Name, FnNotFound)
        case true => Value
            has(Value, Names, FnNotFound)
        case false
            false

fn (Struct, Name, FnNotFound) when is_atom(Name) or is_binary(Name)
    has(Struct, [Name], FnNotFound)

# if Names is a list and the first item is a list, convert the first item to
# binary and call the function again
fn (Struct, [Name:Names], FnNotFound) when is_list(Name)
    has(Struct, [list_to_binary(Name):Names], FnNotFound)

# if the patterns above fail and Name if a list and the first item is an
# integer then it must be a string, convert it to a binary string and call
# the function again
fn (Struct, [First:_]=Name, FnNotFound) when is_integer(First)
    has(Struct, [list_to_binary(Name)], FnNotFound)

@public
has_h = fn (Struct, Name)
    FnNotFound = fn has_not_found:2
    has_h(Struct, Name, FnNotFound)


has_h = fn (Struct, Name, FnNotFound)
    Key = normalize_key(Name)

    FnFound = fn (_Struct, _Name, Value)
        true => Value

    FnNotStruct = fn (_Val)
        false

    do(Struct, Key, FnFound, FnNotFound, FnNotStruct)

@public
@doc("return true if the struct has the given attribute as atom or string,
false otherwise.

only looks on it's attributes, doesn't look in parent ones

the second parameter must be an atom or a list of atoms/strings")
hasown = fn (Struct, Names)
    FnNotFound = fn (_Struct, _Name)
        false

    has(Struct, Names, FnNotFound)

@public
@doc("return all the field names of a struct.

the types are preserved, so if a struct has some string keys (posible if
decoding json) then those keys will be returned as strings.

it's your job to check that. This is done this way to avoid creating atoms
")
fields = fn ((struct, Body))
    [Key for (Key, _Val) in Body if Key != proto_]

fn (Val)
    not_struct(Val)

@public
@doc("extend the struct by adding an attribute named *Key* with value *Value*
if *Key* already exists replace it")
extend = fn ((struct, _Body)=Struct, Key, Value) when is_atom(Key) or is_binary(Key)
    extend(Struct, Key, Value, replace)

fn (Value, _Key, _Value)
    not_struct(Value)

@public
@doc("extend the struct by adding an attribute named *Key* with value *Value*
the last argument specifies the action to take if *Key* already exists,
posible values are:

replace:
    replace the old value

fail:
    throw key_exists exception

ignore:
    keep the old value")
extend = fn ((struct, Body), Key, Value, fail)
    NKey = normalize_key(Key)

    if proplists.is_defined(NKey, Body)
        throw(key_exists)
    else
        (struct, [NKey => Value:Body])

fn ((struct, Body)=Struct, Key, Value, ignore)
    NKey = normalize_key(Key)

    if proplists.is_defined(NKey, Body)
        Struct
    else
        (struct, [NKey => Value:Body])

fn ((struct, Body), Key, Value, replace)
    NKey = normalize_key(Key)

    NewBody = proplists.delete(NKey, Body)
    (struct, [NKey => Value:NewBody])

@public
@doc("return the prototype for a basic struct that can do the operations
defined in this module")
prototype = fn ()
    Get = fn get:2
    GetOwn = fn getown:2
    Has = fn has:2
    HasOwn = fn hasown:2
    Set = fn set:3
    Fields = fn fields:1
    Extend = fn extend:4
    Format = fn format:1
    Print  = fn print:1
    ToPList = fn to_plist:1

    {get: Get, getown: GetOwn, has: Has, hasown: HasOwn, set: Set,
        fields: Fields, extend: Extend, format: Format, print: Print,
        to_plist: ToPList}

@public
@doc("set the default prototype to Struct")
set_prototype = fn (Struct)
    set_prototype(Struct, prototype())

@public
@doc("set the givent prototype to Struct")
set_prototype = fn (Struct, Prototype)
    extend(Struct, proto_, Prototype)

@public
@doc("look for an attribute and call a function when found")
do = fn (Struct, Name, FoundFn)
    do(Struct, Name, FoundFn, fn not_found:2)

@public
@doc("look for an attribute and call a function when found, and other if not
found.

if *Name* is an atom and it's not found it will convert the atom to a binary string
and check again using the binary string as key.

if *Name* is a string or binary string it will only check for the key as binary
string since atoms aren't garbage collected we don't want to be creating atoms
for every attribute lookup.

the FoundFn function will be called with the following parameters:
 * Struct: the struct passed as parameter
 * Name: the name of the attribute as passed to this function
 * Value: the found value of the attribute

the NotFoundFn function will be called with the following parameters:
 * Struct: the struct passed as parameter
 * Name: the name of the attribute as passed to this function
")
do = fn (Struct, Name, FoundFn, NotFoundFn)
    do(Struct, Name, FoundFn, NotFoundFn, fn not_struct:1)

@public
@doc("like do/4 but with a callback to be called when the parameter is not a struct")
do = fn ((struct, Body)=Struct, Name, FoundFn, NotFoundFn, _NotStruct)
    Key = normalize_key(Name)

    switch lists.keyfind(Key, 1, Body)
        case false
            if is_atom(Key)
                StrName = list_to_binary(atom_to_list(Key))

                switch lists.keyfind(StrName, 1, Body)
                    case false
                        NotFoundFn(Struct, Name)
                    case _ => Value
                        FoundFn(Struct, Name, Value)

            else
                NotFoundFn(Struct, Name)
        case _ => Value
            FoundFn(Struct, Name, Value)

fn (Val, _Name, _FoundFn, _NotFoundFn, NotStruct)
    NotStruct(Val)

@public
@doc("return a prop list with the attributes of the struct, this function
doesn't return attributes that are functions or the proto_ attribute")
to_plist = fn ((struct, Body))
    Filter = fn (Key => Val)
        Key != proto_ and not is_function(Val) and Key != <["proto_"]>

    lists.filter(Filter, Body)

fn (Val)
    not_struct(Val)

@public
@doc("return a struct that contains the values provided by the proplist")

from_plist = fn (PList) when is_list(PList)
    Check = fn (_Key => _Val)
        true

    fn (_)
        false

    if lists.all(Check, PList)
        (struct, PList)
    else
        throw(value_error => "parameter is not a valid proplist")

fn (_)
    throw(value_error => "parameter is not a valid proplist")

@public
@doc("return a Key normalized to be used by functions of this module

if the parameter is an atom or a binary string return it as is
if the parameter is a string return a binary string
otherwise crash")
normalize_key = fn (Key) when is_list(Key)
    list_to_binary(Key)

fn (Key) when is_atom(Key) or is_binary(Key)
    Key
