@@license("New BSD License, part of efene, see LICENSE for details")
@@moddoc("module to handle io special cases for efene")

format_result = fn (Items)
    FItems = lists.flatten(Items)
    FItemsLen = length(FItems)

    if FItemsLen == 0
        "{}"
    else
        io_lib.format("{~s}", [lists.sublist(FItems, length(FItems) - 2)])

@doc("like io_lib.format but for efene terms")
@public
format = fn ((struct, Body))
    Items = for Key => Val in Body if not is_function(Val)
        if Key == proto_
            ""
        else
            io_lib.format("~p: ~s, ", [Key, format(Val)])

    format_result(Items)

fn (Val) when is_tuple(Val) and size(Val) == 0
    "(,)"

fn (Val) when is_tuple(Val) and size(Val) == 1
    io_lib.format("(~s,)", [format(element(1, Val))])

fn (Val) when is_tuple(Val)
    Items = for Item in tuple_to_list(Val)
        format(Item) ++ ", "

    format_result(Items)

fn (Val) when is_list(Val) and length(Val) == 0
    "[]"

fn (Val) when is_list(Val)
    Items = for Item in Val
        format(Item) ++ ", "

    format_result(Items)

fn (Val)
    io_lib.format("~p", [Val])

@doc("like io.format but for efene terms")
@public
print = fn (Val)
    io.format("~s", [format(Val)])

@doc("like print but adding a new line")
@public
println = fn (Val)
    io.format("~s~n", [format(Val)])

@doc("request information to the user printing *Prompt*, return it as a string")
@public
input = fn (Prompt)
    io.get_line(Prompt)
