@@moddoc("This module provides a mapper between efene objects and mongodb
through the `emongo`__ library.

__ http://github.com/JacobVorreuter/emongo

The emongo library is not installed by efene, you should install it by
doing::

    git clone http://github.com/JacobVorreuter/emongo.git
    cd emongo
    make
    cd ..

")

@doc("save *Obj* in *Database*, the name of the collection is the name of
the object as returned by *Obj(to, strname)*")

@public
save = fn (Database, Obj)
    Dict = obj.to_dict(Obj)
    Name = Obj(to, strname)

    emongo.insert(Database, Name, Dict)

@doc("update elements in *Database* in the collection given by the
name of the object as returned by *Obj(to, strname)*.
The updated elements are those that have the same value in the attribute
*Key* as *Obj*.

For example, an user object with an attribute *mail*, we want to update
the fields of the elements in the collection that have the same mail as
the object we pass as parameter. Then we call::

    update(somedatabase, User, mail)

This call can update from 0 to N elements depending on how many elements
have the same value for the attribute specified by *Key*")

@public
update = fn (Database, Obj, Key)
    Dict = obj.to_dict(Obj)
    Name = Obj(to, strname)

    emongo.update(Database, Name, [(atom_to_list(Key), Obj(get, Key))], Dict)

@doc("delete the elements in *Database* in the collection given by the
name of the object as returned by *Obj(to, strname)*.
The deleted elements are those that have the same value in the attribute
*Key* as *Obj*.")

@public
delete = fn (Database, Obj, Key)
    Name = Obj(to, strname)

    emongo.delete(Database, Name, [(atom_to_list(Key), Obj(get, Key))])

@doc("return an object with the attributes set from result.
The attributes that are set are those that return true from
*Obj(has, Key)*.

That means that a result from the database can have less or more
attributes than the object, only those existing in the object will
be filled.

Note: strings are set as binary, if you want to have strings as lists
you will have to do it by yourself.")

@public
from_result = fn ([], Obj)
    Obj

fn ([(Key, Value):Result], Obj)
    SKey = binary_to_list(Key)

    NewObj = switch Obj(has, SKey)
        case true
            Obj((set, list_to_atom(SKey)), Value)
        else
            Obj

    from_result(Result, NewObj)

@doc("return a list of objects from *Results*, it works like *from_result/2*
but on receives a collection of results and return a collection of objects")

@public
from_results = fn (Results, Obj)
    from_results(Results, Obj, [])


from_results = fn ([], _Obj, Objs)
    lists.reverse(Objs)

fn ([Result:Results], Obj, Objs)
    from_results(Results, Obj, [from_result(Result, Obj):Objs])

@doc("get all elements from a collection as raw results")

@public
rawall = fn (Database, Type)
    emongo.find(Database, Type)


@doc("get all elements from a collection as objects like *Obj*")

@public
all = fn (Database, Obj)
    from_results(rawall(Database, Obj(to, strname)), Obj)


@doc("find all elements that have the same value in *Key* as *Obj*,
*Key* can be an atom or a string")

@public
find = fn (Database, Obj, Key) when is_atom(Key)
    find(Database, Obj, atom_to_list(Key))

fn (Database, Obj, Key) when is_list(Key)
    query(Database, Obj(to, strname), Obj, [(Key, Obj(get, Key))])


@doc("find one element that has the same value in *Key* as *Obj*,
if no result found, return nil")

@public
findone = fn (Database, Obj, Key)
    switch find(Database, Obj, Key, [(limit, 1)])
        case [Result]
            from_result(Result, Obj)
        else
            nil

@doc("find elements that have the same value in *Key* as *Obj*,
passing *Options* to the query (see emongo Options).

*Key* can be an atom or a string.")


@public
find = fn (Database, Obj, Key, Options) when is_atom(Key)
    query(Database, Obj, [(atom_to_list(Key), Obj(get, Key))], Options)

fn (Database, Obj, Key, Options) when is_list(Key)
    find(Database, Obj, list_to_atom(Key), Options)


@doc("do a query writing the *Selector* by hand on the collection
for *Obj*")

@public
query = fn (Database, Obj, Selector)
    Results = emongo.find(Database, Obj(to, strname), Selector)
    from_results(Results, Obj)

@doc("do a query writing the *Selector* by hand on the collection
for *Obj* passing *Options* (see emongo Options)")

@public
query = fn (Database, Obj, Selector, Options)
    Results = emongo.find(Database, Obj(to, name), Selector, Options)
    from_results(Results, Obj)

