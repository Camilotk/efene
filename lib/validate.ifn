@@moddoc("module to get useful validation functions to be used with obj.validate")

@doc("returns a validator that checks if the parameter is a string")

@public
string = fn ()
    fn erlang.is_list:1

@doc("returns a validator that checks if the parameter is a string with size
larger than *Size*")

@public
string_larger_than = fn (Size)
    list_larger_than(Size)

@doc("returns a validator that checks if the parameter is a string that matches
the regular expression *Regex*")

@public
match = fn (Regex)
    fn (Str)
        is_list(Str) and re.run(Str, Regex) != nomatch

@doc("returns a validator that checks if the parameter is a string that
represents an email")

@public
mail = fn ()
    fn (Str)
        is_list(Str) and re.run(Str,
        "[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+(?:[A-Z]{2}|com|org|net|edu|gov|mil|biz|info|mobi|name|aero|asia|jobs|museum)\\b") != nomatch

@doc("returns a validator that checks if the parameter is a list")

@public
list = fn ()
    fn erlang.is_list:1

@doc("returns a validator that checks if the parameter is a list with size
larget than *Size*")

@public
list_larger_than = fn (Size)
    fn (L)
        is_list(L) and length(L) > Size

@doc("returns a validator that checks if the parameter is a tuple")

@public
tuple = fn ()
    fn erlang.is_tuple:1

@doc("returns a validator that checks if the parameter is a number")

@public
number = fn ()
    fn erlang.is_number:1

@doc("returns a validator that checks if the parameter is an integer")

@public
integer = fn ()
    fn erlang.is_integer:1

@doc("returns a validator that checks if the parameter is a positive number")

@public
positive = fn ()
    fn (X)
        X > 0

@doc("returns a validator that checks if the parameter is a negative number")

@public
negative = fn ()
    fn (X)
        X < 0

@doc("returns a validator that checks if the parameter is zero")

@public
zero = fn ()
    fn (X)
        X == 0

@doc("returns a validator that checks if the parameter is a binary")

@public
binary = fn ()
    fn erlang.is_binary:1

@doc("returns a validator that checks if the parameter is a float")

@public
float = fn ()
    fn erlang.is_float:1

@doc("returns a validator that checks if the parameter is an atom")

@public
atom = fn ()
    fn erlang.is_atom:1

@doc("returns a validator that checks if the parameter is a boolean")

@public
boolean = fn ()
    fn erlang.is_boolean:1

@doc("returns a validator that checks if the parameter is an empty list")

@public
empty_list = fn ()
    fn (X)
        is_list(X) and length(X) === 0

@doc("returns a validator that checks if the parameter is a non empty list")

@public
non_empty_list = fn ()
    fn (X)
        is_list(X) and length(X) > 0

@doc("returns a validator that checks if the parameter is equals to *Val*")

@public
equals = fn (Val)
    fn (X)
        Val == X

@doc("returns a validator that checks if the parameter is not equals to *Val*")

@public
not_equals = fn (Val)
    fn (X)
        Val != X

@doc("returns a validator that checks if the parameter is greater than *Val*")

@public
gt = fn (Val)
    fn (X)
        X > Val

@doc("returns a validator that checks if the parameter is greater or equal than
*Val*")

@public
ge = fn (Val)
    fn (X)
        X >= Val

@doc("returns a validator that checks if the parameter is lesser than *Val*")

@public
lt = fn (Val)
    fn (X)
        X < Val

@doc("returns a validator that checks if the parameter is lesser or equal than
*Val*")

@public
le = fn (Val)
    fn (X)
        X <= Val

