@@license("New BSD License, part of efene, see LICENSE for details")
@@moddoc("Module to make REST APIs by using function attributes")

@rec(route) -> (method=get, path="^/$", transforms=nil,
    accepts=nil, produces=any, handler=nil)

@doc("start the webserver serving the REST APIs available in the modules passed
as parameter (an atom or a list of atoms), use default values for IP
(127.0.0.1) and Port (8000)")

@public
start = fn ([Module:Modules])
    start("127.0.0.1", 8000, Modules, rest_api(Module))

fn (Module) when is_atom(Module)
    start("127.0.0.1", 8000, [], rest_api(Module))

@doc("start the webserver serving the REST APIs in Ip:Port available in the
modules passed as parameter (an atom or a list of atoms)")

@public
start = fn (Ip, Port, [Module:Modules])
    start(Ip, Port, Modules, rest_api(Module))


start = fn (Ip, Port, [], Api)
    Options = [(ip, Ip), (port, Port)]

    Loop = fn (Req)
        loop(Req, Api)

    mochiweb_http.start([(name, mochiweb_example_app), (loop, Loop) : Options])

fn (Ip, Port, [Module:Modules], Api)
    start(Ip, Port, Modules, rest_api(Module, Api))

@doc("the handler of the requests, receive a request and find the handler,
pass the parameters and return the result to the webserver")

@public
loop = fn (Req, Api)
    Request = request(Req)
    Handler = find_handler(Api, Request)

    when Handler == notfound
        response(Req, 404, mime(text), "not found")
    else
        (Route, Captured) = Handler
        (Module, Function) = route.Route[handler]
        Produces = route.Route[produces]
        Accepts  = route.Route[accepts]
        Args     = args_from_request(Request, Captured)

        Transforms = lists.zip(route.Route[transforms], Args)

        TArgs = [Transform(Arg) for (Transform, Arg) in Transforms]

        NewArgs = switch route.Route[method]
            case put
                build_body_args(Req, Request, Accepts, TArgs)
            case post
                build_body_args(Req, Request, Accepts, TArgs)
            else
                [Request:TArgs]

        (Status, Mime, Return) = switch apply(Module, Function, NewArgs)
            case (ok, OMsg)
                (200, Produces, OMsg)
            case (created, CMsg)
                (201, Produces, CMsg)
            case (notfound, NMsg)
                (404, Produces, NMsg)
            case (error, EMsg)
                (501, Produces, EMsg)
            case (unauthorized, UMsg)
                (401, Produces, UMsg)
            case (redirect, Url)
                (303, Produces, Url)
            case (static, Path)
                serve_static(Path)
            case Msg
                (200, Produces, Msg)

        response(Req, Status, mime(Mime), Return)

@doc("return a list with the parameters that are going to be passed
to a handler that handles a PUT or a POST, the first parameter is
the Request object, the second is the body parsed according to the
type the handler accepts and the rest are the args matched from the
URL")

@todo("this functions uses mochiweb specific code, should use
simplebridge request when request_body is implemented")

build_body_args = fn (Req, Request, json, Args)
    Body = Req.recv_body()
    Json = mochijson2.decode(binary_to_list(Body))
    [Request, Json:Args]

fn (_Req, Request, _Accepts, Args)
    [Request, Request.request_body():Args]

serve_static = fn (Path)
    Mime = mime_from_path(Path)

    switch file.read_file(Path)
        case ok => Binary
            (200, Mime, Binary)
        case error => enoent
            (404, Mime, "Not Found")
        case error => eacces
            (401, Mime, "Unauthorized")

@doc("return an atom representing the mime type of a file depending on
it's extension")

@public
mime_from_path = fn (Path)
    switch lists.reverse(Path)
        case "lmth." ++ _
            html
        case "lmx." ++ _
            xml
        case "sj." ++ _
            js
        case "ssc." ++ _
            css
        case "txt." ++ _
            text
        case "oci." ++ _
            icon
        case "fdp." ++ _
            pdf
        case "gnp." ++ _
            png
        case "fig." ++ _
            gif
        case "gpj." ++ _
            jpg
        else
            binary

@doc("get the values of the parameters from the regular expression matching in
the path return a list with request as first parameter and then all the matched
arguments")

args_from_request = fn (Request, Captured)
    args_from_request(Request.path(), tl(Captured), [])

args_from_request = fn (_Path, [], Args)
    lists.reverse(Args)

fn (Path, [(Start, Len):Captured], Args)
    Arg = lists.sublist(Path, Start + 1, Len)
    args_from_request(Path, Captured, [Arg:Args])

@doc("return the method handlers for the given HTTP method")

method_handlers = fn ((api, Gets, _, _, _), 'GET')
    Gets
fn ((api, _, Puts, _, _), 'PUT')
    Puts
fn ((api, _, _, Posts, _), 'POST')
    Posts
fn ((api, _, _, _, Deletes), 'DELETE')
    Deletes


@doc("return the handler for a given request, return notfound
if not found (doh!)")

find_handler = fn (Api, Req)
    Handlers = method_handlers(Api, Req.request_method())
    find_handler_aux(Handlers, Req.path())

find_handler_aux = fn ([], _Path)
    notfound

fn ([(route[path=RoutePath])=Route:Handlers], Path)
    switch re.run(Path, RoutePath)
        case nomatch
            find_handler_aux(Handlers, Path)
        case match => Captured
            (Route, Captured)

@doc("transform an atom describing a mime type to its string representation")

@public
mime = fn (json)
    "application/json"
fn (text)
     "text/plain"
fn (html)
     "text/html"
fn (xml)
     "text/xml"
fn (js)
     "application/javascript"
fn (atom)
     "application/atom+xml"
fn (icon)
     "image/vnd.microsoft.icon"
fn (bin)
     "application/octet-stream"
fn (pdf)
     "application/pdf"
fn (png)
     "image/png"
fn (gif)
     "image/gif"
fn (jpg)
     "image/jpeg"
fn (Unk) when is_atom(Unk)
     atom_to_list(Unk)
fn (Unk) when is_list(Unk)
     Unk

@doc("get the rest api of a module, Module is the module name as atom")

@public
rest_api = fn (Module)
    Dict = dict.new()
    Api = rest_api(@Module.module_info(attributes), Module, Dict)

    Gets = filter_get_methods(Api)
    Puts = filter_put_methods(Api)
    Posts = filter_post_methods(Api)
    Deletes = filter_delete_methods(Api)

    (api, Gets, Puts, Posts, Deletes)

@doc("append the api of a module to an API already generated")

rest_api = fn (Module, (api, Gets, Puts, Posts, Deletes))
    (api, NewGets, NewPuts, NewPosts, NewDeletes) = rest_api(Module)

    A = fn lists.append:2

    (api, A(Gets, NewGets), A(Puts, NewPuts), A(Posts, NewPosts),
        A(Deletes, NewDeletes))

@doc("return only the get methods from the API dict as a list")

filter_get_methods = fn (Api)
    dict.fold(fn filter_get_methods:3, [], Api)

filter_get_methods = fn (_Key, route[method=get]=Route, Acc)
    [Route:Acc]
fn (_Key, _Route, Acc)
    Acc

@doc("return only the put methods from the API dict as a list")

filter_put_methods = fn (Api)
    dict.fold(fn filter_put_methods:3, [], Api)

filter_put_methods = fn (_Key, route[method=put]=Route, Acc)
    [Route:Acc]
fn (_Key, _Route, Acc)
    Acc

@doc("return only the post methods from the API dict as a list")

filter_post_methods = fn (Api)
    dict.fold(fn filter_post_methods:3, [], Api)

filter_post_methods = fn (_Key, route[method=post]=Route, Acc)
    [Route:Acc]
fn (_Key, _Route, Acc)
    Acc

@doc("return only the delete methods from the API dict as a list")

filter_delete_methods = fn (Api)
    dict.fold(fn filter_delete_methods:3, [], Api)

filter_delete_methods = fn (_Key, route[method=delete]=Route, Acc)
    [Route:Acc]
fn (_Key, _Route, Acc)
    Acc

@doc("return the default wwwroot")

root = fn ()
    "./wwwroot"

@doc("build a simple bridge response from a mochiweb request")

response = fn (Req)
    simple_bridge.make_response(mochiweb_response_bridge, (Req, root()))

@doc("build a simple bridge response from a mochiweb request")

response = fn (Req, 303=Status, ContentType, Data)
    Response = response(Req)
    Response1 = Response.status_code(Status)
    Response2 = Response1.header("Content-Type", ContentType)
    Response3 = Response2.header("Location", Data)
    Response4 = Response3.data("")
    Response4.build_response()

fn (Req, Status, ContentType, Data)
    Response = response(Req)
    Response1 = Response.status_code(Status)
    Response2 = Response1.header("Content-Type", ContentType)
    Response3 = Response2.data(Data)
    Response3.build_response()

@doc("build a simple bridge request from a mochiweb request")

request = fn (Req)
    simple_bridge.make_request(mochiweb_request_bridge, (Req, root()))

set_handler = fn (Method, Path, Api, (FunName, _Arity)=Fun, Module, Accepts, Produces, Tail)
    Transforms = token_transformers(Path)
    Route = route[handler=(Module, FunName), method=Method, path=transform_url(Path),
        transforms=Transforms, accepts=Accepts, produces=Produces]
    NewApi = dict.store(Fun, Route, Api)

    rest_api(Tail, Module, NewApi)

rest_api = fn ([], _Module, Api)
    Api

# {get,[{{index,1},{return,[json,"/asd"],html}}]}
fn ([(Method, [((_Name, _Arity)=Fun, (return, Args, Produces))]):T], Module, Api)
    io.format("path ~p, length ~p~n", [Args, length(Args)])

    (Accepts, Path) = if length(Args) == 2
        [Acc:[Pth]] = Args
        (Acc, Pth)
    else
        (any, Args)

    set_handler(Method, Path, Api, Fun, Module, Accepts, Produces, T)

fn ([_:T], Module, Api)
    rest_api(T, Module, Api)

@doc("transform the url from the user friendly form to the regex form
/foo/<string>/<integer>/<float>/? -> /foo/(.+)/(\\d+)/(\\d+\\.\\d+)/?")

transform_url = fn (Url)
    Url1 = Url->re.replace("<string>", "(.[^/]+?)", [(return, list), global])->
        re.replace("<integer>", "([0-9]+)", [(return, list), global])->
        re.replace("<float>", "([0-9]+\\\\.[0-9]+)", [(return, list), global])

    "^" ++ Url1 ++ "$"

@doc("return a list of functions to be called to transform the string input
into the correct type, no operation for <string>, list_to_integer for <integer>
and list_to_float for <float>")

token_transformers = fn (Url)
    Tokens = switch re.run(Url, "<integer>|<string>|<float>|\\(.*?\\)", [global, (capture, all, list)])
        case nomatch
            []
        case (match, Return)
            Return

    token_to_transformer(Tokens, [])

token_to_transformer = fn ([], Trans)
    lists.reverse(Trans)

fn ([["<string>"]:Tokens], Trans)
    token_to_transformer(Tokens, [(fn nop:1):Trans])

fn ([["<float>"]:Tokens], Trans)
    token_to_transformer(Tokens, [(fn erlang.list_to_float:1):Trans])

fn ([["<integer>"]:Tokens], Trans)
    token_to_transformer(Tokens, [(fn erlang.list_to_integer:1):Trans])

fn ([_:Tokens], Trans)
    token_to_transformer(Tokens, [(fn nop:1):Trans])

nop = fn (String) when is_list(String)
    String

