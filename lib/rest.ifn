
# TODO: add module to the record
route = record(method=get, path="^/$", accepts='*', produces=text, handler=nil)

@public
start = fn ([Module:Modules])
    start("127.0.0.1", 8000, Modules, rest_api(Module))

fn (Module) when is_atom(Module)
    start("127.0.0.1", 8000, [], rest_api(Module))

# TODO: allow server selection
@public
start = fn (Ip, Port, [], Api)
    Options = [(ip, Ip), (port, Port)]

    Loop = fn (Req)
        loop(Req, Api)

    mochiweb_http.start([(name, mochiweb_example_app), (loop, Loop) : Options])

fn (Ip, Port, [Module:Modules], Api)
    start(Ip, Port, Modules, rest_api(Module, Api))


@public
loop = fn (Req, Api)
    Request = request(Req)
    Handler = find_handler(Api, Request)

    if Handler == notfound
        not_found(Req)
    else
        (Route, Captured) = Handler
        (Module, Function) = route.Route.handler
        Produces = route.Route.produces
        Args = args_from_request(Request, Captured)

        try
            Return = apply(Module, Function, Args)
            # TODO: auto marshal json
            response(Req, 200, mime(Produces), Return)
        catch _ _Error
            internal_error(Req)

# get the values of the parameters from the regular expression
# matching in the path
# return a list with request as first parameter and then all the
# matched arguments
@public
args_from_request = fn (Request, Captured)
    args_from_request(Request.path(), tl(Captured), [Request])

args_from_request = fn (_Path, [], Args)
    lists.reverse(Args)

fn (Path, [(Start, Len):Captured], Args)
    Arg = lists.sublist(Path, Start + 1, Len)
    args_from_request(Path, Captured, [Arg:Args])

method_handlers = fn ((api, Gets, _, _, _), 'GET')
    Gets
fn ((api, _, Puts, _, _), 'PUT')
    Puts
fn ((api, _, _, Posts, _), 'POST')
    Posts
fn ((api, _, _, _, Deletes), 'DELETE')
    Deletes


find_handler = fn (Api, Req)
    Handlers = method_handlers(Api, Req.request_method())
    find_handler_aux(Handlers, Req.path())

find_handler_aux = fn ([], _Path)
    notfound

fn ([(route[path=RoutePath])=Route:Handlers], Path)
    switch re.run(Path, RoutePath)
        case nomatch
            find_handler_aux(Handlers, Path)
        case (match, Captured)
            (Route, Captured)

@public
mime = fn (json)
    "application/json"
fn (text)
     "text/plain"
fn (html)
     "text/html"
fn (xml)
     "text/xml"
fn (js)
     "application/javascript"
fn (Unk) when is_atom(Unk)
     atom_to_list(Unk)
fn (Unk) when is_list(Unk)
     Unk

@public
print_api = fn (Module)
    Print = fn ((Name, Arity), Route)
        io.format("~p/~p:~n", [Name, Arity])
        io.format("  method: ~p:~n", [route.Route.method])
        io.format("  path: ~p:~n", [route.Route.path])
        io.format("  accepts: ~p:~n", [route.Route.accepts])
        io.format("  produces: ~p:~n", [route.Route.produces])
        io.format("~n")

        Route

    dict.map(Print, rest_api(Module))

@public
rest_api = fn (Module)
    Dict = dict.new()
    Api = rest_api(Module.module_info(attributes), Module, Dict)

    Gets = filter_get_methods(Api)
    Puts = filter_put_methods(Api)
    Posts = filter_post_methods(Api)
    Deletes = filter_delete_methods(Api)

    (api, Gets, Puts, Posts, Deletes)

@public
rest_api = fn (Module, (api, Gets, Puts, Posts, Deletes))
    (api, NewGets, NewPuts, NewPosts, NewDeletes) = rest_api(Module)

    A = fn lists.append:2

    (api, A(Gets, NewGets), A(Puts, NewPuts), A(Posts, NewPosts),
        A(Deletes, NewDeletes))

filter_get_methods = fn (Api)
    dict.fold(fn filter_get_methods:3, [], Api)

filter_get_methods = fn (_Key, route[method=get]=Route, Acc)
    [Route:Acc]
fn (_Key, _Route, Acc)
    Acc

filter_put_methods = fn (Api)
    dict.fold(fn filter_put_methods:3, [], Api)

filter_put_methods = fn (_Key, route[method=put]=Route, Acc)
    [Route:Acc]
fn (_Key, _Route, Acc)
    Acc

filter_post_methods = fn (Api)
    dict.fold(fn filter_post_methods:3, [], Api)

filter_post_methods = fn (_Key, route[method=post]=Route, Acc)
    [Route:Acc]
fn (_Key, _Route, Acc)
    Acc

filter_delete_methods = fn (Api)
    dict.fold(fn filter_delete_methods:3, [], Api)

filter_delete_methods = fn (_Key, route[method=delete]=Route, Acc)
    [Route:Acc]
fn (_Key, _Route, Acc)
    Acc

root = fn ()
    "./wwwroot"

response = fn (Req)
    simple_bridge.make_response(mochiweb_response_bridge, (Req, root()))

response = fn (Req, Status, ContentType, Data)
    Response = response(Req)
    Response1 = Response.status_code(Status)
    Response2 = Response1.header("Content-Type", ContentType)
    Response3 = Response2.data(Data)
    Response3.build_response()

request = fn (Req)
    simple_bridge.make_request(mochiweb_request_bridge, (Req, root()))

not_found = fn (Req)
    response(Req, 404, mime(html), ["<h1>not found</h1>"])

internal_error= fn (Req)
    response(Req, 500, mime(html), ["<h1>internal error</h1>"])

get_or_create_route = fn (Dict, Key, Module)
    IsKey = dict.is_key(Key, Dict)

    if IsKey
        (Dict, dict.fetch(Key, Dict))
    else
        Route = route[handler=(Module, element(1, Key))]
        (dict.store(Key, Route, Dict), Route)

update_route = fn (Dict, Key, Val)
    dict.store(Key, Val, Dict)

set_method = fn (Method, Path, Api, Fun, Module, Tail)
    (Api0, Route0) = get_or_create_route(Api, Fun, Module)

    Route = route.Route0[method=Method, path=transform_url(Path)]

    NewApi = update_route(Api0, Fun, Route)
    rest_api(Tail, Module, NewApi)

rest_api = fn ([], _Module, Api)
    Api

fn ([(get=Method, [((_Name, _Arity)=Fun, Path):_]):T], Module, Api)
    set_method(Method, Path, Api, Fun, Module, T)

fn ([(post=Method, [((_Name, _Arity)=Fun, Path):_]):T], Module, Api)
    set_method(Method, Path, Api, Fun, Module, T)

fn ([(put=Method, [((_Name, _Arity)=Fun, Path):_]):T], Module, Api)
    set_method(Method, Path, Api, Fun, Module, T)

fn ([(delete=Method, [((_Name, _Arity)=Fun, Path):_]):T], Module, Api)
    set_method(Method, Path, Api, Fun, Module, T)

fn ([(accepts, [((_Name, _Arity)=Fun, ContentType):_]):T], Module, Api)
    (Api0, Route0) = get_or_create_route(Api, Fun, Module)
    Route = route.Route0[accepts=ContentType]

    NewApi = update_route(Api0, Fun, Route)
    rest_api(T, Module, NewApi)

fn ([(produces, [((_Name, _Arity)=Fun, ContentType):_]):T], Module, Api)
    (Api0, Route0) = get_or_create_route(Api, Fun, Module)
    Route = route.Route0[produces=ContentType]

    NewApi = update_route(Api0, Fun, Route)
    rest_api(T, Module, NewApi)

fn ([_:T], Module, Api)
    rest_api(T, Module, Api)

# transform the url from the user friendly form to the regex form
# /foo/<string>/<int>/<float>/? -> /foo/(.+)/(\d+)/(\d+\.\d+)/?
@public
transform_url = fn (Url)
    Url1 = Url->re.replace("<string>", "(.[^/]+?)", [(return, list), global])->
        re.replace("<integer>", "([0-9]+)", [(return, list), global])->
        re.replace("<float>", "([0-9]+\\\\.[0-9]+)", [(return, list), global])

    "^" ++ Url1 ++ "$"

