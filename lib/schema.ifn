@@moddoc("module to handle schema definitions based on the JSON schema")

@public
is_string = fn ([])
    true

fn ([H:T]) when H >= 0 and H < 256
    is_string(T)

fn (_)
    false

@public
is_object = fn (Val) when is_tuple(Val) and element(1, Val) == struct
    true

fn (_Val)
    false

@public
is = fn (string, Val)
    is_string(Val)

fn (integer, Val)
    is_integer(Val)

fn (number, Val)
    is_number(Val)

fn (boolean, Val)
    is_boolean(Val)

fn (object, Val)
    is_object(Val)

fn (array, Val)
    is_list(Val)

fn (null, Val)
    Val == null

fn (any, _Val)
    true

fn (Type, _Val)
    throw(invalid_type => Type)

@public
@doc("validate that *Val* is a struct that conforms *Schema*")
validate = fn (Val, Schema)
    if Schema.properties?
        try
            validate_properties(Val, Schema.properties)
        catch Msg
            error => Msg
    else
        throw(value_error => "Schema hasn't a properties attribute")

@public
@doc("validate that *Val* is a struct that conforms the properties struct of a schema")
validate_properties = fn (Val, Props)
    # ugly long function, lot of ifs nested :D
    for AttrName in struct.fields(Props)
        Property = Props.AttrName

        if Val.AttrName?
            # check for the type of the attribute
            ValAttr = Val.AttrName

            if Property.type?
                Type = Property.type

                if is(Type, ValAttr)
                    ok
                else
                    throw(type => (AttrName, Type))

                # if it's a number, check for number specific constraints
                if Type == number or Type == integer
                    if Property.minimum? and ValAttr <= Property.minimum
                        throw(minimum => (AttrName, Property.minimum))

                    else if Property.maximum? and ValAttr >= Property.maximum
                        throw(maximum => (AttrName, Property.maximum))

                    else if Property.exclusiveMinimum? and ValAttr < Property.exclusiveMinimum
                        throw(exclusiveMinimum => (AttrName, Property.exclusiveMinimum))

                    else if Property.exclusiveMaximum? and ValAttr > Property.exclusiveMaximum
                        throw(exclusiveMaximum => (AttrName, Property.exclusiveMaximum))

                    else if Property.divisibleBy? and ValAttr % Property.divisibleBy != 0
                        throw(divisibleBy => (AttrName, Property.divisibleBy))

                    else
                        ok

                # if it's a list, check for array specific constraints
                else if Type == array
                    if Property.minItems? and length(ValAttr) < Property.minItems
                        throw(minItems => (AttrName, Property.minItems))

                    else if Property.maxItems? and length(ValAttr) > Property.maxItems
                        throw(maxItems => (AttrName, Property.maxItems))

                    else if Property.uniqueItems? and Property.uniqueItems
                        if length(ValAttr) == length(lists.usort(ValAttr))
                            ok
                        else
                            throw(uniqueItems => AttrName)
                    else
                        ok

                else if Type == string
                    if Property.pattern? and re.run(ValAttr, Property.pattern) == nomatch
                        throw(pattern => (AttrName, Property.pattern))

                    else if Property.minLength? and length(ValAttr) < Property.minLength
                        throw(minLength => (AttrName, Property.minLength))

                    else if Property.maxLength? and length(ValAttr) > Property.maxLength
                        throw(maxLength => (AttrName, Property.maxLength))
                    else
                        ok
                else
                    ok
            else
                ok


            # check required attributes of this attribute
            if Property.dependencies?
                Dependencies = Property.dependencies

                if struct.has(Val, Dependencies)
                    ok
                else
                    throw(dependencies => (AttrName, Dependencies))
            else
                ok

            # check if the attribute is in enum (if enum is defined)
            if Property.enum? and not lists.member(ValAttr, Property.enum)
                throw(enum => (AttrName, Property.enum))
            else
                ok

        else if Property.required? and not Property.required
            ok
        else
            throw(not_found => AttrName)

    ok
