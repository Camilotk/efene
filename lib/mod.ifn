@@moddoc("functions to manipulate modules")

@doc("return the documentation of *Mod* as a string")

@public
doc = fn (Mod)
    (moddoc, Preamble) = get_attribute(Mod, moddoc, (moddoc, "Module documentation"))
    Docs = attributes(Mod, doc)
    Exports = Mod.module_info(exports)

    PublicFilter = fn ((doc, [(FunDef, _)]))
        lists.member(FunDef, Exports)

    PublicDocs = lists.filter(PublicFilter, Docs)

    format_docs(PublicDocs, Mod, Preamble, [])


@doc("save the documentation of the module *Mod* to *FilePath*")

@public
doc_to_file = fn (Mod, FilePath)
    Docs = doc(Mod)
    file.write_file(FilePath, Docs)


@doc("return the documentation of the function *Mod.Fun/Arity*")

@public
fundoc = fn (Mod, Fun, Arity)
    Info = Mod.module_info(attributes)

    FilterDoc = fn ((doc, [((Fun1, Arity1), _)]))
        when Fun == Fun1 and Arity == Arity1
            true
        else
            false
    fn (_)
        false

    switch lists.filter(FilterDoc, Info)
        case [(doc, [((_, _), Doc)])]
            Doc
        case []
            ""


@doc("iterate over the doc attributes and return the formated docs of all of
them")

format_docs = fn ([], Mod, Preamble, Docs)
    Text = atom_to_list(Mod)
    Title = Text ++ "\n" ++ underline(Text, "=") ++ "\n\n"

    lists.flatten([Title, Preamble, "\n\n":lists.reverse(Docs)])

fn ([(doc, [Doc]):Attrs], Mod, Preamble, Accum)
    format_docs(Attrs, Mod, Preamble, [format_doc(Doc):Accum])

@doc("return a string that repeats the '-' character for the length of *String*")

underline = fn (String)
    underline(String, "-")

@doc("return a string that repeats *Char* for the length of *String*")

underline = fn (String, Char)
    lists.flatten(lists.duplicate(length(String), Char))


@doc("return a string that represents the documentation of the function with
the title as the name and arity and the body containing the documentation
present in the *@doc* attribute")

format_doc = fn (((Name, Arity), Doc))
    Title = atom_to_list(Name) ++ "/" ++ integer_to_list(Arity)

    lists.flatten([Title, "\n", underline(Title), "\n\n", Doc, "\n\n"])

@doc("return the first attribute with name *Name*.  return *Default* if not
found")

@public
get_attribute = fn (Mod, Name, Default)
    switch lists.keyfind(Name, 1, Mod.module_info(attributes))
        case false
            Default
        case Attr
            Attr

@doc("return all the attributes with name *Name* as a List, if no attribute
with that name is found then it will return an empty list.

This function is useful to get attributes that are specific to a function like
the @doc attribute, the function matches all the attributes that are tuples
with the name of the attribute as the first element")

@public
attributes = fn (Mod, Name)
    Info = Mod.module_info(attributes)

    Filter = fn (Attr) when element(1, Attr) == Name
        true
    fn (_)
        false

    lists.filter(Filter, Info)

@public
@doc("define a parametrized module")

attribute = fn (local, Line, (return, [NameAst], FieldsAst))
    Name = erl_parse.normalise(NameAst)

    if not is_atom(Name)
        (error, "module name must be an atom")
    else if element(1, FieldsAst) != tuple
        (error, "fields must be a tuple")
    else
        Fields = element(3, FieldsAst)
        (global_attribute, Line, module, (Name, [VarName for (var, _, VarName) in Fields]))

fn (local, _Line, (return, _NameAst, _FieldsAst))
        (error, "module attribute receives one parameter")

fn (local, _Line, _Args)
        (error, "module attribute must contain field definition after ->")

fn (_Type, _Line, _Args)
    not_implemented

