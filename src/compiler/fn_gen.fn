
public call = fn (Line Function Args)  {
    (call Line Function Args)
}

public call= fn (Line Package Function Args)  {
    (call Line, (remote Line Package Function) Args)
}

public func_def = fn (Line Name Arity Ast)  {
    (function Line Name Arity Ast)
}

public fun_def = fn (Line Patterns)  {
    ('fun' Line Patterns)
}

public try_expr = fn (Line Body Patterns)  {
    ('try' Line Body [] Patterns [])
}

public try_expr = fn (Line Body Patterns Finally)  {
    ('try' Line Body [] Patterns Finally)
}

public if_expr = fn (Line Patterns)  {
    ('if' Line Patterns)
}

public case_expr = fn (Line Condition Patterns)  {
    ('case' Line Condition Patterns)
}

public case_expr = fn (Line Condition Patterns ElseLine ElseBody)  {
    ('case' Line Condition Patterns ++ [clause(Line [(var ElseLine '_')] [] ElseBody)])
}

public clause = fn (Line Pattern Guard Body)  {
    (clause Line Pattern Guard Body)
}

public receive_expr = fn (Line Patterns)  {
    ('receive' Line Patterns)
}

public receive_expr = fn (Line Patterns After AfterBody)  {
    ('receive' Line Patterns After AfterBody)
}

public module = fn (Name Ast PublicFuns)  {
    [(attribute 1 module Name) (attribute 1 export PublicFuns)] ++ Ast
}

public match = fn (Line Ast1 Ast2)  {
    (match Line Ast1 Ast2)
}

public expr = fn (Op Line Ast1)  {
    (op Line Op Ast1)
}

public expr = fn (Op Line Ast1 Ast2)  {
    (op Line Op Ast1 Ast2)
}

public clauses = fn (Patterns)  {
    (clauses Patterns)
}

public tuple = fn (Line Items)  {
    (tuple Line Items)
}

public cons = fn (Line Head Tail)  {
    (cons Line Head Tail)
}

public op = fn (Line Op First)  {
    (Op Line First)
}

public op = fn (Line Op First Second)  {
    (Op Line First Second)
}

public op = fn (Line Op First Second Third)  {
    (Op Line First Second Third)
}

public var = fn (Line Name)  {
    (var Line Name)
}

public atom = fn (Line Name)  {
    (atom Line Name)
}

public nil = fn (Line)  {
    (nil Line)
}

public record = fn (Line Name Fields) {
    (record Line Name Fields)
}

public record = fn (Line Name Var Fields) {
    (record Line Var Name Fields)
}

# to set a field to a value
public rec_field = fn (Line Name Val) {
    (record_field Line Name Val)
}

public rec_field = fn (Line Name Var Field) {
    (record_field Line Var Name Field)
}
