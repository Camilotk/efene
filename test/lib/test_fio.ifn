
check = fn (Expr, Repr, Desc)
    Format = lists.flatten(fio.format(Expr))
    etap.is(Repr, Format, Desc)

test_simple = fn ()
    check(1, "1", "single number")
    check(42, "42", "other number")
    check(1.2, "1.2", "decimal number")

    check((,), "(,)", "empty tuple")
    check((1,), "(1,)", "single tuple")
    check((1, 2), "(1, 2)", "2 item tuple")
    check((1.2, 2, false), "(1.2, 2, false)", "mixed tuple")

    check([], "[]", "empty list")
    check([1], "[1]", "one item list")
    check([1, 2], "[1, 2]", "two item list")
    check([1.2, 2, false], "[1.2, 2, false]", "mixed list")

    check({u: 1}, "{u: 1}", "simple struct")
    check({u: 1, d: 1.2}, "{u: 1, d: 1.2}", "two item struct")
    check({u: 1, d: 1.2, t: tres}, "{u: 1, d: 1.2, t: tres}", "mixed struct")

test_nested = fn ()
    check(((,),), "((,),)", "nested empty tuples")
    check(((1,),), "((1,),)", "nested 1 item tuple")
    check(((1, 2),), "((1, 2),)", "nested 2 item tuple")
    check(((1, 2), (,)), "((1, 2), (,))", "nested mixed tuples")

    check([[]], "[[]]", "nested empty lists")
    check([[1]], "[[1]]", "nested 1 item list")
    check([[1], 2], "[[1], 2]", "nested 1 item list")
    check([[1], [[2]]], "[[1], [[2]]]", "nested nested lists")

    check({u: 1, d: {t: foo}}, "{u: 1, d: {t: foo}}", "nested structs")
    check({z: {u: 1, d: {t: foo}}}, "{z: {u: 1, d: {t: foo}}}", "nested structs")

test_nested_mixed = fn ()
    check(([],), "([],)", "empty list in tuple")
    check(([(,)],), "([(,)],)", "tuple in list in tuple")
    check(([([],)],), "([([],)],)", "multiple nested list and tuples")
    check(([([],[])],[]), "([([], [])], [])", "multiple nested list and tuples")
    check(([([1],[1.2])],[false]), "([([1], [1.2])], [false])", "mixed nesting")

    check({u: 1, d: [1.2], t: (tres,)}, "{u: 1, d: [1.2], t: (tres,)}",
        "mixed items nested in struct")

@public
run = fn ()
    etap.plan(30)
    test_simple()
    test_nested()
    test_nested_mixed()
    etap.end_tests()
