
same = fn (A, A)
    io.format("ok: both terms are ~p~n", [A])

fn (A, B)
    io.format("error: ~p != ~p~n", [A, B])

throws = fn (ExName, Expr)
    try
        Expr()
        io.format("error: expression should throw ~p~n", [ExName])
    catch (ExName => _Desc)
        io.format("ok: expression throws ~p~n", [ExName])
    catch _ (OtherEx => _Desc)
        io.format("error: expression should throw ~p not ~p~n", [ExName, OtherEx])

hasntstr = fn (S, Name)
    if struct.hasstr(S, Name)
        io.format("error: struct ~p shouldn't have ~p~n", [element(2, S), Name])
    else
        io.format("ok: struct ~p has ~p~n", [element(2, S), Name])

hasstr = fn (S, Name)
    if struct.hasstr(S, Name)
        io.format("ok: struct ~p has ~p~n", [element(2, S), Name])
    else
        io.format("error: struct ~p should have ~p~n", [element(2, S), Name])

hasnt = fn (S, Names)
    if struct.has(S, Names)
        io.format("error: struct ~p shouldn't have ~p~n", [element(2, S), Names])
    else
        io.format("ok: struct ~p has ~p~n", [element(2, S), Names])

has = fn (S, Names)
    if struct.has(S, Names)
        io.format("ok: struct ~p has ~p~n", [element(2, S), Names])
    else
        io.format("error: struct ~p should have ~p~n", [element(2, S), Names])

test_has = fn (S)
    has(S, foo)
    hasnt(S, asd)

    has(S, [foo])
    has(S, [foo, bar])
    has(S, [foo, bar, baz])

    hasnt(S, [asd])
    hasnt(S, [asd, bar])
    hasnt(S, [asd, bar, baz])

    hasnt(S, [foo, asd])
    hasnt(S, [foo, bar, asd])
    hasnt(S, [foo, bar, baz, asd])

test_has_atom_keys = fn ()
    S = {foo: {bar: {baz: 1}}}
    test_has(S)

test_has_str_keys = fn ()
    S = {"foo": {"bar": {"baz": 1}}}
    test_has(S)

    hasstr(S, "foo")
    hasntstr(S, "asd")

    has(S, ["foo"])
    has(S, ["foo", "bar"])
    has(S, ["foo", "bar", "baz"])

    hasnt(S, ["asd"])
    hasnt(S, ["asd", "bar"])
    hasnt(S, ["asd", "bar", "baz"])

    hasnt(S, ["foo", "asd"])
    hasnt(S, ["foo", "bar", "asd"])
    hasnt(S, ["foo", "bar", "baz", "asd"])

test_hasstr = fn ()
    S = {foo: 1, "bar": 2, baz: asd}

    has(S, foo)
    has(S, [foo])

    hasntstr(S, "foo")
    hasnt(S, ["foo"])

    hasstr(S, "bar")
    has(S, ["bar"])

test_get = fn ()
    S = {a: {b: {c: 42}, d: 1}, e:2}

    same(struct.get(S, [a]), {b: {c: 42}, d: 1})
    same(struct.get(S, [a, b]), {c: 42})
    same(struct.get(S, [a, b, c]), 42)

    throws(attribute_error, fn () { struct.get(S, [z]) })
    throws(attribute_error, fn () { struct.get(S, [a, z]) })
    throws(attribute_error, fn () { struct.get(S, [a, b, z]) })

    throws(value_error, fn () { struct.get(S, [a, b, c, z]) })
    throws(value_error, fn () { struct.get(S, [a, b, c, d, z]) })

test_getdef = fn ()
    S = {a: {b: {c: 42}, d: 1}, e:2}

    same(struct.getdef(S, [a], nil), {b: {c: 42}, d: 1})
    same(struct.getdef(S, [a, b], nil), {c: 42})
    same(struct.getdef(S, [a, b, c], nil), 42)

    same(struct.getdef(S, [z], nil), nil)
    same(struct.getdef(S, [a, z], nil), nil)
    same(struct.getdef(S, [a, b, z], nil), nil)
    same(struct.getdef(S, [a, b, c, z], nil), nil)
    same(struct.getdef(S, [a, b, c, d, z], nil), nil)

test_set = fn ()
    S = {a: {b: {c: 42}, d: 1}, e:2}

    same(struct.set(S, [a], 2), {a: 2, e: 2})
    same(struct.set(S, [a, b], 3), {a: {b: 3, d: 1}, e: 2})
    same(struct.set(S, [a, b, c], 4), {a: {b: {c: 4}, d: 1}, e: 2})

    throws(attribute_error, fn () { struct.set(S, [z], 1) })
    throws(attribute_error, fn () { struct.set(S, [a, z], 1) })
    throws(attribute_error, fn () { struct.set(S, [a, b, z], 1) })
    throws(value_error, fn () { struct.set(S, [a, b, c, z], 1) })

    throws(attribute_error, fn () { struct.set(S, [z, a], 1) })
    throws(attribute_error, fn () { struct.set(S, [a, z, x], 1) })

test_to_plist = fn ()
    S = {a: 1, b: 2, c: fn lists.seq:2, proto_: nil}
    S1 = {"a": 1, "b": 2, "c": fn lists.seq:2, "proto_": nil}
    S2 = {a: 1, b: 2}
    S3 = {"a": 1, "b": 2}

    same(struct.to_plist(S), [a => 1, b => 2])
    same(struct.to_plist(S1), ["a" => 1, "b" => 2])
    same(struct.to_plist(S2), [a => 1, b => 2])
    same(struct.to_plist(S3), ["a" => 1, "b" => 2])

test_from_plist = fn ()
    PList = [a => 1, b => 2]
    PList1 = ["a" => 1, "b" => 2]

    same(PList->struct.from_plist()->struct.to_plist(), PList)
    same(PList1->struct.from_plist()->struct.to_plist(), PList1)

    throws(value_error, fn () { struct.from_plist(1) })
    throws(value_error, fn () { struct.from_plist([1]) })
    throws(value_error, fn () { struct.from_plist([a => 1, b]) })

test_set_prototype = fn ()
    S = {a: 1, b: 2}

    S1 = struct.set_prototype(S)

    same(S1.to_plist(), [a => 1, b => 2])
    same(S1.fields(), [a, b])
    same(S1.has(a), true)

@public
run = fn ()
    test_has_atom_keys()
    test_has_str_keys()
    test_hasstr()
    test_get()
    test_getdef()
    test_set()
    test_to_plist()
    test_from_plist()
    test_set_prototype()
