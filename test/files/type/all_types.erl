-module(all_types).
-export([]).

-type bt_endian():: 'big' | 'little' | 'native'.
-type bt_sign()  :: 'signed' | 'unsigned'.
-type bt_type()  :: 'integer' | 'float' | 'binary' | 'utf8' | 'utf16' | 'utf32'.
-type bt_unit()  :: 1..256.
-type internal_status() :: 'starting' | 'started' | 'stopping'.
-type zstream()     :: port().
-type zlevel()      :: 'none' | 'default' | 'best_compression' | 'best_speed'.
-type zmethod()     :: 'deflated'.
%-type zwindowbits() :: -15..-9 | 9..47.
-type zmemlevel()   :: 1..9.
-type zstrategy()   :: 'default' | 'filtered' | 'huffman_only'.
-type zflush()      :: 'none' | 'sync' | 'full' | 'finish'.
-type host() :: atom().
-type prim_state() :: #prim_state{}.
-type date() :: {pos_integer(), pos_integer(), pos_integer()}.
-type time() :: {non_neg_integer(), non_neg_integer(), non_neg_integer()}.
-type date_time() :: {date(), time()}.
-type dst() :: pid() | port() | atom() | {atom(), node()}.
-type domTree() :: #domTree{}.
-type domFrontier() :: gb_tree().
-type label()    :: integer() | 'top' | 'external' | 'external_call'.
-type ordset(X)  :: [X].  % XXX: TAKE ME OUT
-type labelset() :: ordset(label()).
-type outlist()  :: [labelset()] | 'none'.
-type escapes()  :: labelset().
-type label()    :: integer() | 'external' | 'top'.
-type ordset(X)  :: [X].  % XXX: TAKE ME OUT
-type labelset() :: ordset(label()).
-type outlist()  :: [labelset()] | 'none'.
-type parse_form() :: {atom(), _, _} | {atom(), _, _, _}. %% XXX: Temporarily
-type rng_elem()   :: 'pos_inf' | 'neg_inf' | integer().
-type t_inf_mode() :: 'opaque' | 'structured'.
-type type_names() :: [{'type' | 'opaque' | 'record', atom()}].
-type label()   :: integer() | 'external' | 'top'.
-type ordset(X) :: [X].  % XXX: TAKE ME OUT
-type check_fun() :: fun((_, _) -> boolean()).
-type hook() :: 'none' | fun((cerl:cerl(), _, _) -> prettypr:document()).
-type context() :: #ctxt{}.
-type inf_integer() :: 'neg_inf' | 'pos_inf' | integer().
-type comp_icode_ret() :: {'native',hipe_architecture(),{'unprofiled',_}}.
-type mod() :: atom().
-type c_unit() :: mod() | mfa().
-type f_unit() :: mod() | binary().
-type ret_rtl() :: [_].
-type c_ret() :: {'ok', c_unit()} | {'error', term()}.
-type compile_file() :: atom() | string() | binary().
-type compile_ret() :: {hipe_architecture(), binary()} | list().
-type icode_info() :: [{'arg_types', [erl_types:erl_type()]}].
-type range_tuple() :: {'neg_inf' | integer(), 'pos_inf' | integer()}.
-type range_rep()   :: range_tuple() | 'empty'.
-type fun_name()    :: atom() | tuple().
-type inf_integer() :: 'neg_inf' | 'pos_inf' | integer().
-type range_anno() :: {range_anno, #ann{}, fun((#ann{}) -> string())}.
-type args_fun() :: fun((mfa(),cfg()) -> [#range{}]).
-type call_fun() :: fun((mfa(),[#range{}]) -> #range{}).
-type final_fun() :: fun((mfa(),[#range{}]) -> ok).
-type data() :: {mfa(), args_fun(), call_fun(), final_fun()}.
-type label() :: non_neg_integer().
-type info() :: gb_tree().
-type work_list() :: {[label()], [label()], set()}.
-type variable() :: #icode_variable{}.
-type annotated_variable() :: #icode_variable{}.
-type argument() :: #icode_const{} | variable().
-type three_range_fun()   :: fun((#range{},#range{},#range{}) -> #range{}).
-type instr_split_info()  :: {icode_instr(), [{label(),info()}]}.
-type last_instr_return() :: {instr_split_info(), #range{}}.
-type bin_operation() :: fun((#range{},#range{}) -> #range{}).
-type unary_operation() :: fun((#range{}) -> #range{}).
-type struct_elems() :: {icode_var(), non_neg_integer(), icode_term_arg()}.
-type mfa_icode() :: {mfa(), #icode{}}.
-type hipe_beam_to_icode_ret() :: [{mfa(),#icode{}}].
-type args_fun()  :: fun((mfa(), cfg()) -> [erl_types:erl_type()]).
-type call_fun()  :: fun((mfa(), [_]) -> erl_types:erl_type()).
-type final_fun() :: fun((mfa(), [_]) -> 'ok').
-type data()	  :: {mfa(), args_fun(), call_fun(), final_fun()}.
-type code_label()   :: term(). % XXX: FIXME
-type label_ref()    :: {'label', code_label()}.
-type block()	     :: [hipe_constlbl() | label_ref()].
-type ctab_array()   :: {'ctab_array', 'byte' | 'word', pos_integer()}.
-type element_type() :: 'byte' | 'word' | ctab_array().
-type sort_order()   :: term(). % XXX: FIXME
-type ct_type() :: 'block' | 'ref' | 'sorted_block' | 'term'.
-type ctdata() :: #ctdata{}.
-type raw_data() :: binary() | number() | list() | tuple().
-type tbl_ref()  :: {hipe_constlbl(), non_neg_integer()}.
-type ref_type() :: 0..4.
-type hipe_array() :: integer(). % declare this in hipe.hrl or builtin?
-type label()      :: non_neg_integer().
-type address()    :: non_neg_integer().
-type label_pair() :: {label(), #label_data{}}.
-type gvarname() :: 'icode' | 'rtl' | 'arm' | 'ppc' | 'sparc' | 'x86'.
-type hipe_code_type() :: 'icode' | 'rtl' | 'arm' | 'ppc' | 'sparc' | 'x86'.
-type ordset(T) :: [T].      % XXX: temporarily
-type gnode()   :: any().
-type edge()    :: {gnode(), gnode()}.
-type fa() :: {atom(), arity()}. % {Fun,Arity}
-type fa_address() :: {atom(), arity(), non_neg_integer()}. % {F,A,Address}
-type bool_lattice() :: 'true' | 'false' | 'top' | 'bottom'.
-type conditional()  :: 'eq' | 'ne' | 'ge' | 'geu' | 'gt' | 'gtu' | 'le'.
-type yecc_ret() :: {'error', _} | {'ok', _}.
-type file()             :: string().
-type dir()              :: string().
-type mod_cond()         :: all | app | ebin | derived | none.
-type incl_cond()        :: include | exclude | derived.
-type debug_info()       :: keep | strip.
-type app_file()         :: keep | strip | all.
-type re_regexp()        :: string().
-type regexps()          :: [re_regexp()] | {add, [re_regexp()]} | {del, [re_regexp()]} .
-type incl_sys_filters() :: regexps().
-type excl_sys_filters() :: regexps().
-type incl_app_filters() :: regexps().
-type excl_app_filters() :: regexps().
-type incl_archive_filters() :: regexps().
-type excl_archive_filters() :: regexps().
-type archive_opt()      :: term().
-type root_dir()         :: dir().
-type lib_dir()          :: dir().
-type profile()          :: development | embedded | standalone.
-type relocatable()      :: boolean().
-type escript_file()     :: file().
-type mod_name()         :: atom().
-type app_name()         :: atom().
-type app_vsn()          :: string().
-type app_type()         :: permanent | transient | temporary | load | none.
-type incl_app()         :: app_name().
-type rel_name()         :: string().
-type rel_vsn()          :: string().
-type boot_rel()         :: rel_name().
-type rel_app()          :: app_name().
-type mod()              :: {incl_cond, incl_cond()}.
-type app()              :: {vsn, app_vsn()}.
-type escript()          :: {incl_cond, incl_cond()}.
-type sys()              :: {mod_cond, mod_cond()}.
-type config()           :: {sys, [sys()]}.
-type option()           :: {wx_debug, term()} | {trap_exit, boolean()} | config() | {config, config() | file()}.
-type options()          :: [option()].
-type server_pid()       :: pid().
-type window_pid()       :: pid().
-type server()           :: server_pid() | options().
-type rel_file()         :: term().
-type script_file()      :: term().
-type reason()           :: string().
-type escript_arg()      :: string().
-type target_spec()     :: term().
-type target_dir()      :: dir().
-type incl_defaults()   :: boolean().
-type incl_derived()    :: boolean().
-type util_cpus() :: 'all' | integer() | [integer()].
-type util_state() :: 'user' | 'nice_user' | 'kernel' | 'wait' | 'idle'.
-type util_value() :: {util_state(), float()} | float().
-type util_desc() :: {util_cpus(), util_value(), util_value(), []}.
-type func_info() :: {non_neg_integer(), atom(), arity()}.
-type inc_file_info() :: {string(), func_info()}.
-type func_info() :: {non_neg_integer(), atom(), arity()}.
-type chars() :: [char() | any()]. % chars()
-type prep_status() :: 'error' | 'last' | 'more' | 'terminate'.
-type restart_type() :: 'permanent' | 'transient' | 'temporary'.
-type application_opt() :: {'description', string()}.
-type application_spec() :: {'application', atom(), [application_opt()]}.
-type name() :: term().
-type get_members_ret() :: [pid()] | {'error', {'no_such_group', name()}}.
-type gcp_error_reason() :: {'no_process', term()} | {'no_such_group', term()}.
-type call() :: {'create', name()}.
-type all_members() :: [[name(),...]].
-type cast() :: {'exchange', node(), all_members()}.
-type ip4_address() :: {0..255,0..255,0..255,0..255}.
-type package_name() :: atom() | string().
-type flag()       :: 'send' | 'receive' | 'print' | 'timestamp'.
-type component()  :: 'label' | 'serial' | flag().
-type value()      :: non_neg_integer().
-type token_pair() :: {component(), value()}.
-type token() :: [] | {integer(), boolean(), _, _, _}.
-type tracer() :: pid() | port() | 'false'.
-type verbosity() :: 'silent' | 'verbose'.
-type load_error_rsn() :: 'badfile' | 'native_code' | 'nofile' | 'not_purged'.
-type load_ret() :: {'error', load_error_rsn()} | {'module', atom()}.
-type loaded_ret_atoms() :: 'cover_compiled' | 'preloaded'.
-type loaded_filename() :: file:filename() | loaded_ret_atoms().
-type replace_path_error() :: {'error', 'bad_directory' | 'bad_name' | {'badarg',_}}.
-type which_ret_atoms() :: loaded_ret_atoms() | 'non_existing'.
-type publish_type() :: 'hidden' | 'normal'.
-type sync_state()   :: 'no_conf' | 'synced'.
-type group_name()  :: atom().
-type group_tuple() :: {group_name(), [node()]}.
-type name()  :: atom().
-type where() :: {'node', node()} | {'group', group_name()}.
-type info_item() :: {'state', sync_state()}.
-type dlog_state_error() :: 'ok' | {'error', term()}.
-type bytes()          :: binary() | [byte()].
-type log()            :: term().  % XXX: refine
-type file_error()     :: term().  % XXX: refine
-type invalid_header() :: term().  % XXX: refine
-type open_error_rsn() :: 'no_such_log'.
-type dist_error_rsn() :: 'nodedown' | open_error_rsn().
-type ret()            :: {'ok', log()}.
-type open_ret()       :: ret() | {'error', open_error_rsn()}.
-type all_open_ret()   :: open_ret() | dist_open_ret().
-type log_error_rsn() :: 'no_such_log' | 'nonode' | {'read_only_mode', log()}.
-type notify_ret() :: 'ok' | {'error', 'no_such_log'}.
-type close_error_rsn() ::'no_such_log' | 'nonode'.
-type lclose_error_rsn() :: 'no_such_log'.
-type trunc_error_rsn() :: 'no_such_log' | 'nonode'.
-type inc_wrap_error_rsn() :: 'no_such_log' | 'nonode'.
-type sync_error_rsn() :: 'no_such_log' | 'nonode' | {'read_only_mode', log()}.
-type block_error_rsn() :: 'no_such_log' | 'nonode' | {'blocked_log', log()}.
-type unblock_error_rsn() :: 'no_such_log' | 'nonode'.
-type msg_tag() :: 'error' | 'error_report'.
-type state()   :: {non_neg_integer(), non_neg_integer(), [term()]}.
-type swap_handler_type() :: 'false' | 'silent' | 'tty' | {'logfile', string()}.
-type method() :: fun((term(), pid(), pid()) -> pid() | 'none').
-type id() :: {term(), term()}.
-type retries() :: non_neg_integer() | 'infinity'.
-type trans_fun() :: function() | {module(), atom()}.
-type open_ret() :: {'ok', #wrap_reader{}} | {'error', tuple()}.
-type chunk_ret() :: {#wrap_reader{}, [term()]}.
-type filename()  :: string().
-type file_info() :: #file_info{}.
-type io_device() :: pid() | #file_descriptor{}.
-type location()  :: integer() | {'bof', integer()} | {'cur', integer()}.
-type mode()      :: 'read' | 'write' | 'append' | 'raw' | 'binary'.
-type bindings()  :: any().
-type socket() :: port().
-type posix() :: atom().
-type ether_address() :: [0..255].
-type family_option() :: 'inet' | 'inet6'.
-type protocol_option() :: 'tcp' | 'udp' | 'sctp'.
-type df_ret() :: 'ok' | {'error', {'badopen', module()}} | {'undef', module()}.
-type bindings() :: [{cerl:cerl(), cerl:cerl()}].
-type expr() :: 'any' | cerl:cerl().
-type match_ret() :: 'none' | {'true', bindings()} | {'false', bindings()}.
-type var_name() :: integer() | atom() | {atom(), integer()}.
-type c_alias()   :: #c_alias{}.
-type c_apply()   :: #c_apply{}.
-type c_binary()  :: #c_binary{}.
-type c_bitstr()  :: #c_bitstr{}.
-type c_call()    :: #c_call{}.
-type c_case()    :: #c_case{}.
-type c_catch()   :: #c_catch{}.
-type c_clause()  :: #c_clause{}.
-type c_cons()    :: #c_cons{}.
-type c_fun()     :: #c_fun{}.
-type c_let()     :: #c_let{}.
-type c_letrec()  :: #c_letrec{}.
-type c_literal() :: #c_literal{}.
-type c_module()  :: #c_module{}.
-type c_primop()  :: #c_primop{}.
-type c_receive() :: #c_receive{}.
-type c_seq()     :: #c_seq{}.
-type c_try()     :: #c_try{}.
-type c_tuple()   :: #c_tuple{}.
-type c_values()  :: #c_values{}.
-type c_var()     :: #c_var{}.
-type cerl() :: c_alias()  | c_apply()  | c_binary()  | c_bitstr().
-type ctype() :: 'alias'   | 'apply'  | 'binary' | 'bitrst'  | 'call' | 'case'.
-type value() :: integer() | float() | atom() | [].
-type dtype() :: 'cons' | 'tuple' | {'atomic', value()}.
-type c_lct() :: c_literal() | c_cons() | c_tuple().
-type iapply()    :: #iapply{}.
-type ibinary()   :: #ibinary{}.
-type icall()     :: #icall{}.
-type icase()     :: #icase{}.
-type icatch()    :: #icatch{}.
-type iclause()   :: #iclause{}.
-type ifun()      :: #ifun{}.
-type iletrec()   :: #iletrec{}.
-type imatch()    :: #imatch{}.
-type iprimop()   :: #iprimop{}.
-type iprotect()  :: #iprotect{}.
-type ireceive1() :: #ireceive1{}.
-type ireceive2() :: #ireceive2{}.
-type iset()      :: #iset{}.
-type itry()      :: #itry{}.
-type i() :: iapply()   | ibinary()   | icall()     | icase()  | icatch().
-type error()   :: {file:filename(), [{integer(), module(), term()}]}.
-type warning() :: {file:filename(), [{integer(), module(), term()}]}.
-type fa()        :: {atom(), arity()}.
-type attribute() :: atom().
-type form()      :: {function, integer(), atom(), arity(), _}.
-type err_desc() :: 'bad_binary' | 'no_binaries' | 'nomatch'.
-type error() :: 'bad_unicode' | 'bin_argument_order'.
-type warning() :: term().	% XXX: REFINE
-type error() :: 'bad_call' | 'nomatch_shadow' | {'nomatch_shadow', integer()}.
-type label() :: non_neg_integer().
-type bdict() :: #asm{}.
-type fa()       :: {atom(), arity()}.
-type err_desc() :: 'invalid_attributes' | 'invalid_exports'.
-type error()    :: {module(), err_desc()}.
-type warning()  :: {module(), term()}.
-type ret() :: {'ok', [{module(), [warning(),...]}]}.
-type option() :: atom() | {atom(), term()} | {'d', atom(), term()}.
-type line()     :: integer().
-type err_info() :: {line(), module(), term()}. %% ErrorDescriptor
-type errors()   :: [{file:filename(), [err_info()]}].
-type warnings() :: [{file:filename(), [err_info()]}].
-type mod_ret()  :: {'ok', module()}.
-type bin_ret()  :: {'ok', module(), binary()}.
-type err_ret()  :: 'error' | {'error', errors(), warnings()}.
-type comp_ret() :: mod_ret() | bin_ret() | err_ret().
-type yecc_ret() :: {'error', _} | {'ok', _}.
-type literals()     :: 'none' | gb_tree().
-type symbolic_tag() :: 'a' | 'f' | 'h' | 'i' | 'u' | 'x' | 'y' | 'z'.
-type disasm_tag()   :: symbolic_tag() | 'fr' | 'atom' | 'float' | 'literal'.
-type disasm_term()  :: 'nil' | {disasm_tag(), _}.
-type l_info() :: {non_neg_integer(), {_,_,_,_,_,_}}.
-type mapping()     :: {'map', dict()} | {'rec', dict(), dict()}.
-type environment() :: [mapping(),...].
-type all_return_type() :: [atom()].
-type severity() :: 'silence' | 'warning' | 'info' | 'log' | 'debug' | 'trace'.
-type yecc_ret() :: {'error', _} | {'ok', _}.
-type mfa_or_funlbl() :: label() | mfa().
-type scc()	      :: [mfa_or_funlbl()].
-type mfa_calls()     :: [{mfa_or_funlbl(), mfa_or_funlbl()}].
-type callgraph() :: #callgraph{}.
-type callgraph_edge() :: {mfa_or_funlbl(),mfa_or_funlbl()}.
-type gs_object() :: any().  %% XXX: should be imported from gs
-type mfa_or_funlbl() :: label() | mfa().
-type label_type()  :: label() | [label()] | {label()}.
-type args()        :: [label_type() | [string()]].
-type var_to_map1() :: core_vars() | [cerl:cerl()].
-type var_to_map2() :: cerl:cerl() | [cerl:cerl()].
-type core_args()   :: [core_vars()] | 'empty'.
-type op()          :: 'bind' | 'unbind'.
-type dep_calls()  :: 'whereis' | 'ets_lookup' | 'mnesia_dirty_read'.
-type warn_calls() :: 'register' | 'unregister' | 'ets_insert'.
-type call()       :: 'whereis' | 'register' | 'unregister' | 'ets_new'.
-type race_tag()   :: 'whereis_register' | 'whereis_unregister'.
-type case_tags()  :: 'beg_case' | #beg_clause{} | #end_clause{} | #end_case{}.
-type code()       :: [#dep_call{} | #warn_call{} | #fun_call{}].
-type table()      :: {'named', table_var(), [string()]} | 'other' | 'no_t'.
-type contr_constr()  :: {'subtype', erl_types:erl_type(), erl_types:erl_type()}.
-type contract_pair() :: {erl_types:erl_type(), [contr_constr()]}.
-type abstract_code() :: [tuple()]. %% XXX: refine
-type comp_options()  :: [atom()].  %% XXX: only a resticted set of options used
-type get_core_from_src_ret() :: {'ok', cerl:c_module()} | {'error', string()}.
-type get_core_from_abs_ret() :: {'ok', cerl:c_module()} | 'error'.
-type local_set() :: 'none' | #set{}.
-type dep()      :: integer().  %% type variable names used as constraint ids
-type type_var() :: erl_types:erl_type(). %% actually: {'c','var',_,_}
-type constr_op()    :: 'eq' | 'sub'.
-type fvar_or_type() :: #fun_var{} | erl_types:erl_type().
-type constraint() :: #constraint{}.
-type constraint_list() :: #constraint_list{}.
-type constraint_ref() :: #constraint_ref{}.
-type constr() :: constraint() | constraint_list() | constraint_ref().
-type typesig_scc()    :: [{mfa(), {cerl:c_var(), cerl:c_fun()}, dict()}].
-type typesig_funmap() :: [{type_var(), type_var()}]. %% Orddict
-type mod_deps() :: dict().
-type arity_patt() :: '_' | arity().
-type mfa_patt()   :: {module(), atom(), arity_patt()}.
-type file_md5() :: {file:filename(), binary()}.
-type plt_info() :: {[file_md5()], dict()}.
-type ret_args_types() :: {erl_types:erl_type(), [erl_types:erl_type()]}.
-type mfa_types() :: {mfa(), erl_types:erl_type(), [erl_types:erl_type()]}.
-type inc_file_err_rsn() :: 'no_such_file' | 'read_error'.
-type md5_diff()    :: [{'differ', atom()} | {'removed', atom()}].
-type check_error() :: 'not_valid' | 'no_such_file' | 'read_error'.
-type wx_object() :: any().  %% XXX: should be imported from wx
-type parent() :: 'none' | pid().
-type doc_plt() :: 'undefined' | dialyzer_plt:plt().
-type file_contract() :: {file_line(), #contract{}}.
-type plt_contracts() :: [{mfa(), #contract{}}]. % actually, an orddict()
-type tmp_contract_fun() :: fun((dict()) -> contract_pair()).
-type dial_cl_parse_ret() :: {'check_init', #options{}}.
-type comment()     :: {integer(), integer(), integer(), [string()]}.
-type commentLine() :: {integer(), integer(), integer(), string()}.
-type ordset(X) :: [X].  % XXX: TAKE ME OUT
-type key() :: 'attributes' | 'errors' | 'exports' | 'functions' | 'imports'.
-type info_pair() :: {key(), term()}.
-type functionN()    :: atom() | {atom(), arity()}.
-type functionName() :: functionN() | {atom(), functionN()}.
-type fields() :: [{atom(), 'none' | erl_syntax:syntaxTree()}].
-type info() :: {atom(), [{atom(), 'none' | erl_syntax:syntaxTree()}]}.
-type appFunName() :: {atom(), arity()} | {atom(), {atom(), arity()}}.
-type shortname() :: atom() | {atom(), arity()}.
-type name()      :: shortname() | {atom(), shortname()}.
-type errorinfo() :: term(). % {integer(), atom(), term()}.
-type option() :: atom() | {atom(), term()}.
-type syntaxTreeAttributes() :: #attr{}.
-type syntaxTree() :: #tree{} | #wrapper{} | tuple(). % XXX: refine
-type padding() :: 'none' | integer().
-type guard() :: 'none' | syntaxTree() | [syntaxTree()] | [[syntaxTree()]].
-type forms() :: syntaxTree() | [syntaxTree()].
-type options()  :: [atom() | {atom(), any()}].
-type context() :: 'guard_expr' | 'guard_test' | 'normal'.
-type hook() :: 'none'.
-type context() :: #ctxt{}.
-type deep_string() :: [char() | deep_string()].
-type document() :: 'null' | #text{} | #nest{} | #beside{}.
-type ctxt() :: #c_best_nest{} | #c_above_nest{}.
-type ordset(X) :: [X].  % XXX: TAKE ME OUT
-type option() :: atom() | {atom(), term()}.
-type attribute()      :: {atom(), term()}.
-type moduleName()     :: atom().
-type functionName()   :: {atom(), arity()}.
-type functionPair()   :: {functionName(), {moduleName(), functionName()}}.
-type stubDescriptor() :: [{moduleName(), [functionPair()], [attribute()]}].
-type notes() :: 'always' | 'yes' | 'no'.
-type renamings() :: [{atom(), atom()}].
-type yecc_ret() :: {'error', _} | {'ok', _}.
-type yecc_ret() :: {'error', _} | {'ok', _}.
-type yecc_ret() :: {'error', _} | {'ok', _}.
-type yecc_ret() :: {'error', _} | {'ok', _}.
-type yecc_ret() :: {'error', _} | {'ok', _}.
-type yecc_ret() :: {'error', _} | {'ok', _}.
-type yecc_ret() :: {'error', _} | {'ok', _}.
-type yecc_ret() :: {'error', _} | {'ok', _}.
-type percept_option() :: 'procs' | 'ports' | 'exclusive' | 'scheduler'.
-type yecc_ret() :: {'error', _} | {'ok', _}.
-type egd_image() :: pid().
-type point() :: {non_neg_integer(), non_neg_integer()}.
-type render_option() :: {'render_engine', 'opaque'} | {'render_engine', 'alpha'}.
-type color() :: {float(), float(), float(), float()}.
-type percept_option() :: 'procs' | 'ports' | 'exclusive' | 'scheduler'.
-type yecc_ret() :: {'error', _} | {'ok', _}.
-type ann() :: Var :: integer(). 
-type t1() :: atom(). 
-type t2() :: [t1()]. 
-type t3(Atom) :: integer(Atom). 
-type t4() :: t3(foobar). 
-type t5() :: {t1(), t3(foo)}. 
-type t6() :: 1 | 2 | 3.
-type t7() :: []. 
-type t71() :: [_]. 
-type t8() :: {any(),none(),pid(),port()}.
-type t9() :: [1|2|3|foo|bar].
-type t10() :: {1|2|3|foo|t9()} | {}. 
-type t11() :: 1..2. 
-type t13() :: maybe_improper_list(integer(), t11()). 
-type t14() :: [erl_scan:foo()].
%-type t15() :: {binary(),<<>>,<<_:34>>,<<_:_*42>>,
-type t16() :: fun(). 
-type t17() :: fun((...) -> paren()). 
-type t18() :: fun(() -> t17() | t16()). 
-type t19() :: fun((t18()) -> t16()).
-type t20() :: [t19(), ...]. 
-type t21() :: tuple(). 
-type t21(A) :: A. 
-type t22() :: t21(integer()). 
-type t23() :: #rec1{}. 
%-type t24() :: #rec2{a :: t23(), b :: [atom()]}. 
-type ann() :: Var :: integer(). 
-type t1() :: atom(). 
-type t2() :: [t1()]. 
-type t3(Atom) :: integer(Atom). 
-type t4() :: t3(foobar). 
-type t5() :: {t1(), t3(foo)}. 
-type t6() :: 1 | 2 | 3.
-type t7() :: []. 
-type t71() :: [_]. 
-type t8() :: {any(),none(),pid(),port()}.
-type t9() :: [1|2|3|foo|bar].
-type t10() :: {1|2|3|foo|t9()} | {}. 
-type t11() :: 1..2. 
-type t13() :: maybe_improper_list(integer(), t11()). 
%-type t15() :: {binary(),<<>>,<<_:34>>,<<_:_*42>>,
-type t16() :: fun(). 
-type t17() :: fun((...) -> paren()). 
-type t18() :: fun(() -> t17() | t16()). 
-type t19() :: fun((t18()) -> t16()).
-type t20() :: [t19(), ...]. 
-type t21() :: tuple(). 
-type t21(A) :: A. 
-type t22() :: t21(integer()). 
-type t23() :: #rec1{}. 
%-type t24() :: #rec2{a :: t23(), b :: [atom()]}. 
-type direction() :: 'left' | 'right' | 'both'.
-type beam() :: module() | file:filename() | binary().
-type forms()     :: term().
-type abst_vsn()  :: atom().
-type abst_code() :: {abst_vsn(), forms()} | 'no_abstract_code'.
-type attribute() :: atom().
-type attrvalue() :: term().
-type dataB()     :: binary().
-type index()     :: non_neg_integer().
-type label()     :: integer().
-type chunkid()   :: nonempty_string(). % approximation of the strings below
-type chunkname() :: 'abstract_code' | 'attributes' | 'compile_info'.
-type chunkref()  :: chunkname() | chunkid().
-type attrib_entry()   :: {attribute(), [attrvalue()]}.
-type compinfo_entry() :: {atom(), term()}.
-type labeled_entry()  :: {atom(), arity(), label()}.
-type chunkdata() :: {chunkid(), dataB()}.
-type info_pair() :: {'file', file:filename()}.
-type chnk_rsn()  :: {'unknown_chunk', file:filename(), atom()}.
-type cmp_rsn()   :: {'modules_different', module(), module()}.
-type mode()           :: 'des3_cbc'.
-type crypto_fun_arg() :: 'init'.
-type crypto_fun()     :: fun((crypto_fun_arg()) -> term()).
-type calls() :: 'clear_crypto_key_fun'.
-type priority_level() :: 'high' | 'low' | 'max' | 'normal'.
-type spawn_option()   :: 'link'.
-type dict_or_pid()    :: pid() | [_] | {integer(), integer(), integer()}.
-type gb_set_node() :: 'nil' | {term(), _, _}.
-type macros() :: [{atom(), term()}].
-type tag()     :: 'deprecated' | 'removed'. %% | 'experimental'.
-type mfas()    :: mfa() | {atom(), atom(), [byte()]}.
-type release() :: string().
-type linkage()    :: 'link' | 'nolink'.
-type emgr_name()  :: {'local', atom()} | {'global', term()}.
-type start_ret()  :: {'ok', pid()} | 'ignore' | {'error', term()}.
-type debug_flag() :: 'trace' | 'log' | 'statistics' | 'debug'.
-type option()     :: {'timeout', timeout()}.
-type options()    :: [option()].
-type ordset(T) :: [T].
-type vertices() :: [digraph:vertex()].
-type option() :: {'type', 'inherit' | [digraph:d_type()]}.
-type seg()  :: tuple().
-type segs() :: tuple().
-type dir()  :: file:filename().
-type b()    :: non_neg_integer().
-type f()    :: 1..255.
-type pred() :: fun((term()) -> boolean()).
-type cmd_line_arg() :: atom() | string().
-type category() :: atom().
-type column() :: pos_integer().
-type line() :: integer().
-type location() :: line() | {line(),column()}.
-type resword_fun() :: fun((atom()) -> boolean()).
-type option() :: 'return' | 'return_white_spaces' | 'return_comments'.
-type options() :: option() | [option()].
-type symbol() :: atom() | float() | integer() | string().
-type info_line() :: integer() | term().
-type attributes() :: line() | attributes_data().
-type token() :: {category(), attributes(), symbol()}.
-type tokens() :: [token()].
-type error_description() :: term().
-type error_info() :: {location(), module(), error_description()}.
-type string_return() :: {'ok', tokens(), location()}.
-type char_spec() :: string() | 'eof'.
-type cont() :: return_cont() | [].
-type tokens_result() :: {'ok', tokens(), location()}.
-type tokens_return() :: {'done', tokens_result(), char_spec()}.
-type attribute_item() :: 'column' | 'length' | 'line'.
-type info_location() :: location() | term().
-type attribute_info() :: {'column', column()}| {'length', pos_integer()}.
-type token_item() :: 'category' | 'symbol' | attribute_item().
-type token_info() :: {'category', category()} | {'symbol', symbol()}.
-type setlineattr_fun() :: fun((info_line()) -> info_line()).
-type tab()        :: atom() | tid().
-type ext_info()   :: 'md5sum' | 'object_count'.
-type protection() :: 'private' | 'protected' | 'public'.
-type type()       :: 'bag' | 'duplicate_bag' | 'ordered_set' | 'set'.
-type table_info() :: {'name', atom()}.
-type match_pattern() :: atom() | tuple().
-type match_specs()   :: [{match_pattern(), [_], [_]}].
-type continuation() :: '$end_of_table'.
-type fname()      :: string() | atom().
-type t2f_option() :: {'extended_info', [ext_info()]}.
-type f2t_option() :: {'verify', boolean()}.
-type qlc__query_handle() :: term().  %% XXX: belongs in 'qlc'
-type num_objects()  :: 'default' | pos_integer().
-type trav_method()  :: 'first_next' | 'last_prev'.
-type table_option() :: {'n_objects', num_objects()}.
-type device() :: atom() | pid().
-type prompt() :: atom() | string().
-type line()   :: pos_integer().
-type encoding()   :: 'latin1' | 'unicode' | 'utf8' | 'utf16' | 'utf32'.
-type expand_fun() :: fun((term()) -> {'yes'|'no', string(), [string(), ...]}).
-type opt_pair()   :: {'binary', boolean()}.
-type setopt() :: 'binary' | 'list' | opt_pair().
-type format() :: atom() | string() | binary().
-type erl_parse_expr_list() :: [_]. %% XXX: should be imported from erl_parse
-type parse_ret() :: {'ok', erl_parse_expr_list(), line()}.
-type erl_parse_absform() :: _. %% XXX: should be imported from erl_parse
-type parse_form_ret() :: {'ok', erl_parse_absform(), line()}.
-type array_indx() :: non_neg_integer().
-type array_opt()  :: 'fixed' | non_neg_integer().
-type array_opts() :: array_opt() | [array_opt()].
-type indx_pair()  :: {array_indx(), term()}.
-type indx_pairs() :: [indx_pair()].
-type property()   :: atom() | tuple().
-type aliases()    :: [{any(), any()}].
-type negations()  :: [{any(), any()}].
-type expansions() :: [{property(), [any()]}].
-type operation() :: {'aliases', aliases()}.
-type orddict() :: [{term(), term()}].
-type chars() :: [_].
-type depth() :: -1 | non_neg_integer().
-type lint_state() :: #lint{}.
-type size() :: 'all' | 'unknown' | non_neg_integer() | tuple(). % XXX: REFINE
-type type() :: 'bytes' | 'bitstring' | 'bits'.
-type year()     :: non_neg_integer().
-type year1970() :: 1970..10000.	% should probably be 1970..
-type month()    :: 1..12.
-type day()      :: 1..31.
-type hour()     :: 0..23.
-type minute()   :: 0..59.
-type second()   :: 0..59.
-type daynum()   :: 1..7.
-type ldom()     :: 28 | 29 | 30 | 31. % last day of month
-type t_now()    :: {non_neg_integer(),non_neg_integer(),non_neg_integer()}.
-type t_date()         :: {year(),month(),day()}.
-type t_time()         :: {hour(),minute(),second()}.
-type t_datetime()     :: {t_date(),t_time()}.
-type t_datetime1970() :: {{year1970(),month(),day()},t_time()}.
-type timediff() :: {integer(), t_time()}.
-type day_of_year() :: 0..365.
-type handler()   :: atom() | {atom(), term()}.
-type emgr_name() :: {'local', atom()} | {'global', atom()}.
-type emgr_ref()  :: atom() | {atom(), atom()} |  {'global', atom()} | pid().
-type start_ret() :: {'ok', pid()} | {'error', term()}.
-type attributes() :: 'export' | 'file' | 'import' | 'module'.
-type pre_op() :: 'catch' | '+' | '-' | 'bnot' | '#'.
-type ran() :: {integer(), integer(), integer()}.
-type time()      :: non_neg_integer().
-type timestamp() :: {non_neg_integer(), non_neg_integer(), non_neg_integer()}.
-type open_mode()  :: 'read' | 'write'.
-type reg_handle() :: {'win32reg',port()}.
-type name()       :: string() | 'default'.
-type value()      :: string() | integer() | binary().
-type object()   :: tuple().
-type pattern()  :: atom() | tuple().
-type tab_name() :: atom() | reference().
-type cont() :: #dets_cont{}.
-type ascii_string() :: [1..255].
-type prompt_func() :: 'default' | {module(),atom()}.
-type edge()    :: term().
-type label()   :: term().
-type vertex()  :: term().
-type add_edge_err_rsn() :: {'bad_edge', [vertex()]} | {'bad_vertex', vertex()}.
-type d_protection() :: 'private' | 'protected'.
-type d_cyclicity()  :: 'acyclic' | 'cyclic'.
-type d_type()       :: d_cyclicity() | d_protection().
-type name()         :: pid() | atom() | {'global', atom()}.
-type system_event() :: {'in', _Msg} | {'in', _Msg, _From} | {'out', _Msg, _To}.
-type log_flag() :: 'true' | {'true',pos_integer()} | 'false' | 'get' | 'print'.
-type l2f_fname() :: string() | 'false'.
-type gb_tree_node() :: 'nil' | {_, _, _, _}.
-type concat_thing() :: atom() | integer() | float() | string().
-type attributes() :: 'export' | 'file' | 'import' | 'module'.
-type pre_op() :: 'catch' | '+' | '-' | 'bnot' | '#'.
-type yecc_ret() :: {'error', _} | {'ok', _}.
-type rule()   :: {string(), string()}.
-type ecode()  :: 'non_existing' | 'preloaded' | 'interpreted'.
-type option() :: {'i', string()} | {'outdir', string()} | {'d', atom()}.
-type done_arg2() :: {'ok', io_lib:chars()} | 'eof' | {'error', term()}.
-type continuation() :: [] | {_, _, _, _}.  % XXX: refine
-type fread_2_ret()  :: {'ok', io_lib:chars(), string()}.
-type fread_3_ret()  :: {'more', continuation()}.
-type bt_endian():: 'big' | 'little' | 'native'.
-type bt_sign()  :: 'signed' | 'unsigned'.
-type bt_type()  :: 'integer' | 'float' | 'binary' | 'utf8' | 'utf16' | 'utf32'.
-type bt_unit()  :: 1..256.
-type yecc_ret() :: {'error', _} | {'ok', _}.
-type yecc_ret() :: {'error', _} | {'ok', _}.
