
throws = fn (ExName, Expr)
    try
        Expr()
        io.format("error: expression should throw ~p~n", [ExName])
    catch (Ex => _Desc)
        etap.is(Ex, ExName,
            io_lib.format("throws exception ~p", [ExName]))

hasnt = fn (S, Names)
    etap.not_ok(struct.has(S, Names), io_lib.format("struct hasn't ~p", [Names]))

has = fn (S, Names)
    etap.ok(struct.has(S, Names), io_lib.format("struct has ~p", [Names]))

test_has = fn (S)
    has(S, foo)

    has(S, foo)
    has(S, [foo])
    has(S, [foo, bar])
    has(S, [foo, bar, baz])

    hasnt(S, [asd])
    hasnt(S, [asd, bar])
    hasnt(S, [asd, bar, baz])

    hasnt(S, [foo, asd])
    hasnt(S, [foo, bar, asd])
    hasnt(S, [foo, bar, baz, asd])

test_has_atom_keys = fn ()
    S = {foo: {bar: {baz: 1}}}
    test_has(S)

test_has_str_keys = fn ()
    S = {"foo": {"bar": {"baz": 1}}}
    test_has_str_keys(S)

test_has_str_keys_proto = fn ()
    S = {"foo": {proto_: {"bar": {"baz": 1}}}}
    test_has_str_keys(S)

    S1 = {"foo": {proto_: {"bar": {"baz": 1}}}}
    test_has_str_keys(S1)

    S2 = {"foo": {proto_: {"bar": {proto_: {"baz": 1}}}}}
    test_has_str_keys(S2)

test_has_str_keys = fn (S)
    test_has(S)

    has(S, ["foo"])
    has(S, ["foo", "bar"])
    has(S, ["foo", "bar", "baz"])

    hasnt(S, ["asd"])
    hasnt(S, ["asd", "bar"])
    hasnt(S, ["asd", "bar", "baz"])

    hasnt(S, ["foo", "asd"])
    hasnt(S, ["foo", "bar", "asd"])
    hasnt(S, ["foo", "bar", "baz", "asd"])

    has(S, "foo")
    has(S, ["foo"])
    has(S, ["foo", "bar"])
    has(S, ["foo", "bar", "baz"])

    has(S, <["foo"]>)
    has(S, [<["foo"]>])
    has(S, [<["foo"]>, <["bar"]>])
    has(S, [<["foo"]>, <["bar"]>, <["baz"]>])

    has(S, ["foo", bar, <["baz"]>])
    has(S, [<["foo"]>, "bar", baz])
    has(S, [foo, "bar", <["baz"]>])


test_get = fn ()
    S = {a: {b: {c: 42}, d: 1}, e:2}
    test_get(S)

    etap.is(struct.get(S, [a]), {b: {c: 42}, d: 1}, "simple attr")
    etap.is(struct.get(S, [a, b]), {c: 42}, "simple path")

test_get_proto = fn ()
    S = {proto_: {a: {b: {c: 42}, d: 1}}, e:2}
    test_get(S)

    etap.is(struct.get(S, [a]), {b: {c: 42}, d: 1}, "simple proto attr")
    etap.is(struct.get(S, [a, b]), {c: 42}, "simple proto path")

    S1 = {proto_: {a: {proto_: {b: {c: 42}, d: 1}}}, e:2}
    test_get(S1)

    etap.is(struct.get(S1, [a]), {proto_: {b: {c: 42}, d: 1}}, "proto attr")
    etap.is(struct.get(S1, [a, b]), {c: 42}, "proto in proto")

    S2 = {proto_: {a: {b: {proto_: {c: 42}}, d: 1}}, e:2}
    test_get(S2)

    etap.is(struct.get(S2, [a]), {b: {proto_: {c: 42}}, d: 1}, "simple attr")
    etap.is(struct.get(S2, [a, b]), {proto_: {c: 42}}, "attr in proto")

test_get = fn (S)

    etap.is(struct.get(S, [a, b, c]), 42, "deep path")

    throws(attribute_error, fn () { struct.get(S, [z]) })
    throws(attribute_error, fn () { struct.get(S, [a, z]) })
    throws(attribute_error, fn () { struct.get(S, [a, b, z]) })

    throws(value_error, fn () { struct.get(S, [a, b, c, z]) })
    throws(value_error, fn () { struct.get(S, [a, b, c, d, z]) })

test_set_atom = fn ()
    S = {a: {b: {c: 42}, d: 1}, e:2}
    test_set(S)
    etap.is(struct.set(S, [a], 2), {a: 2, e: 2}, "set atom simple attr")
    etap.is(struct.set(S, [a, b], 3), {a: {b: 3, d: 1}, e: 2}, "set atom simple path")
    etap.is(struct.set(S, [a, b, c], 4), {a: {b: {c: 4}, d: 1}, e: 2}, "set atom deep path")

test_set_binary_string = fn ()
    S = {"a": {"b": {"c": 42}, "d": 1}, "e":2}
    test_set(S)
    etap.is(struct.set(S, [a], 2), {"a": 2, "e": 2}, "set binary string attr")
    etap.is(struct.set(S, [a, b], 3), {"a": {"b": 3, "d": 1}, "e": 2}, "set binary string simple path")
    etap.is(struct.set(S, [a, b, c], 4), {"a": {"b": {"c": 4}, "d": 1}, "e": 2}, "set binary string deep path")

test_set = fn (S)

    throws(attribute_error, fn () { struct.set(S, [z], 1) })
    throws(attribute_error, fn () { struct.set(S, [a, z], 1) })
    throws(attribute_error, fn () { struct.set(S, [a, b, z], 1) })
    throws(value_error, fn () { struct.set(S, [a, b, c, z], 1) })

    throws(attribute_error, fn () { struct.set(S, [z, a], 1) })
    throws(attribute_error, fn () { struct.set(S, [a, z, x], 1) })

test_to_plist = fn ()
    S = {a: 1, b: 2, c: fn lists.seq:2, proto_: nil}
    S1 = {"a": 1, "b": 2, "c": fn lists.seq:2, "proto_": nil}
    S2 = {a: 1, b: 2}
    S3 = {"a": 1, "b": 2}

    etap.is(struct.to_plist(S), [a => 1, b => 2], "to plist with fns")
    etap.is(struct.to_plist(S1), [<["a"]> => 1, <["b"]> => 2], "to plist binary strings with fns and proto")
    etap.is(struct.to_plist(S2), [a => 1, b => 2], "simple to plist")
    etap.is(struct.to_plist(S3), [<["a"]> => 1, <["b"]> => 2], "simple to plist with strings")

test_from_plist = fn ()
    PList = [a => 1, b => 2]
    PList1 = ["a" => 1, "b" => 2]

    etap.is(PList->struct.from_plist()->struct.to_plist(), PList, "from plist atoms")
    etap.is(PList1->struct.from_plist()->struct.to_plist(), PList1, "from plist strings")

    throws(value_error, fn () { struct.from_plist(1) })
    throws(value_error, fn () { struct.from_plist([1]) })
    throws(value_error, fn () { struct.from_plist([a => 1, b]) })

test_set_prototype = fn ()
    S = {a: 1, b: 2}

    S1 = struct.set_prototype(S)

    etap.is(S1.to_plist(), [a => 1, b => 2], "set proto and to plist")
    etap.is(S1.fields(), [a, b], "get field names in proto")
    etap.is(S1.has(a), true, "has attribute in proto")

test_strip_funs = fn ()
    Fun = fn (Self)
        Self

    etap.is({a: 1}, struct.strip_funs({a: 1}), "strip funs no fun")
    etap.is({a: 1}, struct.strip_funs({a: 1, f: Fun}), "strip funs with fun")
    etap.is({a: 1, b: {c: 2}}, struct.strip_funs({a: 1, f: Fun, b: {c: 2}}), "nested strip funs no fun")
    etap.is({a: 1, b: {c: 2}}, struct.strip_funs({a: 1, f: Fun, b: {c: 2, f1: Fun}}), "nested strip funs")

@public
run = fn ()
    etap.plan(201)
    test_has_atom_keys()
    test_has_str_keys()
    test_has_str_keys_proto()
    test_get()
    test_get_proto()
    test_set_atom()
    test_set_binary_string()
    test_to_plist()
    test_from_plist()
    test_set_prototype()
    test_strip_funs()
    etap.end_tests()
